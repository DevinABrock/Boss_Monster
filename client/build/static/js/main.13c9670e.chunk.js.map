{"version":3,"sources":["assets/cards.js","components/layout/Header.jsx","components/layout/BaseLayout.jsx","actions/types.js","reducers/cardDecks.js","reducers/gamePhase.js","reducers/playerStats.js","reducers/misc.js","reducers/heroStats.js","reducers/index.js","actions/sampleActions.js","App.jsx","actions/miscActions.js","components/gameLogic/initializingDeck.js","components/gameComponents/Info.jsx","components/gameLogic/diceRoll.js","components/gameComponents/Card.jsx","components/gameComponents/Hand.jsx","components/gameComponents/Event.jsx","components/gameComponents/Town.jsx","components/gameComponents/Username.jsx","components/gameComponents/Dungeon.jsx","components/Game.jsx","components/DungeonMasters.jsx","components/Progress.jsx","components/Credits.jsx","components/HowToPlay.jsx","index.js"],"names":["cardBack","id","name","image","dungeonBack","subtitle","treasure","blankCard","bossDeck","xp","description","roomDeck","dmg","spellDeck","phase","heroDeck","HP","players","epicHeroDeck","Header","className","to","src","BaseLayout","children","SHUFFLE_ALL_DECKS","DEAL_HEROES_TO_TOWN","DEAL_INITIAL_CARDS","RESET_PLAYER_CARDS","NEXT_GAME_PHASE","PLAYER_KILLED","RESET_GAME","DECREASE_PLAYER_HEALTH","DEAL_ROOM_CARD","BAIT_HEROES","UPDATE_PLAYER_TREASURE","NEXT_ROUND","ADD_BUILD_ACTIONS","BUILDING_MODE","BUILD_DUNGEON","DAMAGE_ROOM","CHANGE_SHOW_DISCARD_PILE","DISCARD_CARD","DRAW_FROM_DISCARD","SELECT_CARD","SET_HERO_START_OF_DUNGEON","MOVE_HERO_NUMBER_OF_STEPS","DAMAGE_HERO","HERO_KILLED","HERO_SURVIVED","CHANGE_USE_BUTTON_SWAPPING","SWAP_ROOMS","CHANGE_SWAP_ROOMS_MODE","ADD_USERNAME","ADD_SOUL","ABLE_TO_DESTROY","DESTROY_ROOM","initialState","showDiscardPile","monsterCardFromDiscard","trapCardFromDiscard","roomCardFromDiscard","heroesInTown","heroesAtStartOfDungeon","playerBoss","playerRooms","playerDungeon","discardPile","cardDecks","state","action","type","data","heroType","chosenHeroes","slice","number","chosenBoss","chosenRooms","card","durability","targetID","newPlayerDungeon","i","length","push","filter","cardObj","map","roomArr","tempArr","unshift","roomID","destroyedDungeon","newDiscardPile","roomIndex","destroyedRoomArr","splice","concat","selectedCardIndex","targetRoomIndex","newDungeon","index","targetedRoomID","selectedCardID","bossTreasure","thiefTreasure","treasureThief","clericTreasure","treasureCleric","fighterTreasure","treasureFighter","heroesToPlayerDungeon","hero","includes","numRoomsDestroyed","newDiscardPile2","forEach","cardsToDraw","newRoomDeck","roomTypeToDraw","cardDiscarded","cardDrawn","gamePhase","gameRound","username","health","souls","buildActions","useButtonSwapping","swapRoomsMode","destroyMode","playerStats","points","room","split","treasureString","numberOfActions","addedBuildActions","buildingMode","misc","heroRoomPosition","heroHealth","heroStats","roomsInPlayerDungeon","steps","newHeroPosition","roomClassName","damage","lastHero","rootReducer","combineReducers","shuffleAllDecksAction","allDecksObj","dealHeroesToTown","dealRoomCard","baitHeroes","dealInitialCardsAction","nextGamePhase","nextRound","updatePlayerTreasure","decreasePlayerHealth","buildDungeon","moveHeroNumberOfSteps","damageHero","heroKilled","heroSurvived","playerKilled","addBuildActions","changeUseButtonSwapping","changeSwapRoomsMode","changeShowDiscardPile","drawFromDiscard","ableToDestroy","destroyRoom","App","useState","setUsername","dispatch","useDispatch","useEffect","localStorage","setItem","JSON","stringify","navigate","useNavigate","window","addEventListener","e","key","handleFormSubmit","addUsername","alt","placeholder","required","value","onChange","target","onClick","selectCard","require","shuffleDeck","givenDeck","x","randomCardNum","Math","floor","random","givenX","shuffleAllDecks","Info","useSelector","playerHealth","playerSouls","buildingModeState","selectedCard","selectedCardClass","win","setWin","tempMessage","setTempMessage","cardCount","setCardCount","firstTimeInMaze","setFirstTimeInMaze","countMinotaursMaze","setCountMinotaursMaze","countDracolichLair","setCountDracolichLair","usingDracolichLair","setUsingDracolichLair","openGrave","setOpenGrave","dracolichLair","setDracolichLair","vampireBordello","setVampireBordello","golemFactory","setGolemFactory","bottomlessPit","setBottomlessPit","boulderRamp","setBoulderRamp","crushinator","setCrushinator","crushinatorDamageModifier","setCrushinatorDamageModifier","usedCardID","setUsedCardID","console","log","dungeonContainersSelectedCard","array","heroDiedCheck","roomName","alert","handleChangeGamePhase","message","confirm","setHeroStartOfDungeon","roomBuffs","remainingHealth","shuffledDecks","roomStack","damageBuff","numberOfMonsterRooms","cardArr","checkRoomDestroyEffects","tempMSG","undefined","renderGamePhaseSwitch","saveScore","a","userInfo","fetch","method","headers","body","response","json","rollNumber","ceil","isHit","diceRoll","renderMessageSwitch","Card","Hand","roomCard","Event","builds","Array","from","Town","Username","Dungeon","beastMenagerieFirstTime","setBeastMenagerieFirstTime","handleBuild","passiveAbilities","beastMenagerieInDungeon","monsterCardsInDiscard","cardName","hasBeastMenagerie","renderHeroArray","renderHeroAtPosition","reverse","Game","initializeDeck","roomLength","dealInitialCards","DungeonMasters","highScores","setHighScores","getScores","compareScores","b","records","sort","playerRecord","badgeTitle","Progress","React","countOfProgress","setCountOfProgress","setInterval","oldProgress","min","style","display","paddingTop","paddingLeft","paddingRight","textAlign","marginBottom","color","ProgressBar","now","parseInt","variant","label","Credits","href","HowToPlay","store","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","path","element","document","getElementById"],"mappings":";oHACA,wVAAO,IAAMA,EAAW,CACtBC,GAAI,KACJC,KAAM,WACNC,MAAO,0CAGIC,EAAc,CACzBH,GAAI,KACJC,KAAM,WACNG,SAAU,YACVF,MAAO,4CACPG,SAAU,IAGCC,EAAY,CACvBN,GAAI,MACJE,MAAO,0CAKIK,EAAW,CAWtB,CACEP,GAAI,KACJC,KAAM,QACNG,SAAU,kBACVI,GAAI,IACJH,SAAU,SAGVI,YAAa,sCACbP,MAAO,iCAET,CACEF,GAAI,KACJC,KAAM,aACNG,SAAU,uBACVI,GAAI,IACJH,SAAU,UAGVI,YAAa,sCACbP,MAAO,sCA+BT,CACEF,GAAI,KACJC,KAAM,YACNG,SAAU,oBACVI,GAAI,IACJH,SAAU,QAGVI,YAAa,sCACbP,MAAO,qCAET,CACEF,GAAI,KACJC,KAAM,UACNG,SAAU,mBACVI,GAAI,IACJH,SAAU,QAGVI,YAAa,sCACbP,MAAO,oCAOEQ,EAAW,CAEtB,CACEV,GAAI,KACJC,KAAM,aACNG,SAAU,YACVO,IAAK,EACLN,SAAU,YACVI,YACE,sFACFP,MAAO,qCAET,CACEF,GAAI,KACJC,KAAM,aACNG,SAAU,YACVO,IAAK,EACLN,SAAU,YACVI,YACE,sFACFP,MAAO,qCAET,CACEF,GAAI,KACJC,KAAM,aACNG,SAAU,YACVO,IAAK,EACLN,SAAU,YACVI,YACE,sFACFP,MAAO,qCAGT,CACEF,GAAI,KACJC,KAAM,aACNG,SAAU,YACVO,IAAK,EACLN,SAAU,SACVI,YACE,iHACFP,MAAO,qCAET,CACEF,GAAI,KACJC,KAAM,aACNG,SAAU,YACVO,IAAK,EACLN,SAAU,SACVI,YACE,iHACFP,MAAO,qCAiET,CACEF,GAAI,MACJC,KAAM,iBACNG,SAAU,wBACVO,IAAK,EACLN,SAAU,SACVI,YACE,yHACFP,MAAO,yCAET,CACEF,GAAI,MACJC,KAAM,iBACNG,SAAU,wBACVO,IAAK,EACLN,SAAU,SACVI,YACE,yHACFP,MAAO,yCAGT,CACEF,GAAI,MACJC,KAAM,mBACNG,SAAU,wBACVO,IAAK,EACLN,SAAU,SACVI,YACE,0IACFP,MAAO,2CAET,CACEF,GAAI,MACJC,KAAM,mBACNG,SAAU,wBACVO,IAAK,EACLN,SAAU,SACVI,YACE,0IACFP,MAAO,2CAGT,CACEF,GAAI,MACJC,KAAM,gBACNG,SAAU,eACVO,IAAK,EACLN,SAAU,aACVI,YAAa,sDACbP,MAAO,wCAqBT,CACEF,GAAI,MACJC,KAAM,gBACNG,SAAU,eACVO,IAAK,EACLN,SAAU,UACVI,YACE,gEACFP,MAAO,wCAET,CACEF,GAAI,MACJC,KAAM,gBACNG,SAAU,eACVO,IAAK,EACLN,SAAU,UACVI,YACE,gEACFP,MAAO,wCAaT,CACEF,GAAI,MACJC,KAAM,kBACNG,SAAU,eACVO,IAAK,EACLN,SAAU,UACVI,YACE,6EACFP,MAAO,4CAaT,CACEF,GAAI,MACJC,KAAM,mBACNG,SAAU,eACVO,IAAK,EACLN,SAAU,UACVI,YAAa,yDACbP,MAAO,2CAqBT,CACEF,GAAI,MACJC,KAAM,kBACNG,SAAU,wBACVO,IAAK,EACLN,SAAU,UACVI,YACE,uEACFP,MAAO,0CAaT,CACEF,GAAI,MACJC,KAAM,qBACNG,SAAU,wBACVO,IAAK,IACLN,SAAU,UACVI,YACE,8EACFP,MAAO,4CAuKT,CACEF,GAAI,MACJC,KAAM,iBACNG,SAAU,YACVO,IAAK,EACLN,SAAU,QACVI,YAAa,+CACbP,MAAO,yCAET,CACEF,GAAI,MACJC,KAAM,iBACNG,SAAU,YACVO,IAAK,EACLN,SAAU,QACVI,YAAa,+CACbP,MAAO,yCAET,CACEF,GAAI,MACJC,KAAM,iBACNG,SAAU,YACVO,IAAK,EACLN,SAAU,QACVI,YAAa,+CACbP,MAAO,yCAGT,CACEF,GAAI,MACJC,KAAM,eACNG,SAAU,YACVO,IAAK,EACLN,SAAU,QACVI,YACE,8EACFP,MAAO,uCAET,CACEF,GAAI,MACJC,KAAM,eACNG,SAAU,YACVO,IAAK,EACLN,SAAU,QACVI,YACE,8EACFP,MAAO,uCAGT,CACEF,GAAI,MACJC,KAAM,mBACNG,SAAU,YACVO,IAAK,EACLN,SAAU,QACVI,YACE,qEACFP,MAAO,2CAET,CACEF,GAAI,MACJC,KAAM,mBACNG,SAAU,YACVO,IAAK,EACLN,SAAU,QACVI,YACE,qEACFP,MAAO,2CAET,CACEF,GAAI,MACJC,KAAM,mBACNG,SAAU,YACVO,IAAK,EACLN,SAAU,QACVI,YACE,qEACFP,MAAO,2CAkCT,CACEF,GAAI,MACJC,KAAM,mBACNG,SAAU,qBACVO,IAAK,EACLN,SAAU,QACVI,YACE,+EACFP,MAAO,2CAET,CACEF,GAAI,MACJC,KAAM,mBACNG,SAAU,qBACVO,IAAK,EACLN,SAAU,QACVI,YACE,+EACFP,MAAO,2CAGT,CACEF,GAAI,MACJC,KAAM,kBACNG,SAAU,qBACVO,IAAK,EACLN,SAAU,QACVI,YACE,sFACFP,MAAO,0CAET,CACEF,GAAI,MACJC,KAAM,kBACNG,SAAU,qBACVO,IAAK,EACLN,SAAU,QACVI,YACE,sFACFP,MAAO,0CAGT,CACEF,GAAI,MACJC,KAAM,mBACNG,SAAU,eACVO,IAAK,EACLN,SAAU,iBACVI,YACE,wFACFP,MAAO,2CAET,CACEF,GAAI,MACJC,KAAM,mBACNG,SAAU,eACVO,IAAK,EACLN,SAAU,iBACVI,YACE,wFACFP,MAAO,2CAGT,CACEF,GAAI,MACJC,KAAM,oBACNG,SAAU,YACVO,IAAK,EACLN,SAAU,kBACVI,YACE,0EACFP,MAAO,4CAET,CACEF,GAAI,MACJC,KAAM,oBACNG,SAAU,YACVO,IAAK,EACLN,SAAU,kBACVI,YACE,0EACFP,MAAO,4CAGT,CACEF,GAAI,MACJC,KAAM,kBACNG,SAAU,eACVO,IAAK,EACLN,SAAU,kCACVI,YAAa,gDACbP,MAAO,0CAET,CACEF,GAAI,MACJC,KAAM,kBACNG,SAAU,eACVO,IAAK,EACLN,SAAU,kCACVI,YAAa,gDACbP,MAAO,0CAET,CACEF,GAAI,MACJC,KAAM,kBACNG,SAAU,eACVO,IAAK,EACLN,SAAU,kCACVI,YAAa,gDACbP,MAAO,0CAwBT,CACEF,GAAI,MACJC,KAAM,qBACNG,SAAU,YACVO,IAAK,EACLN,SAAU,mBACVI,YACE,mGACFP,MAAO,6CAET,CACEF,GAAI,MACJC,KAAM,qBACNG,SAAU,YACVO,IAAK,EACLN,SAAU,mBACVI,YACE,mGACFP,MAAO,8CAiDEU,EAAY,CAiBvB,CACEZ,GAAI,KACJC,KAAM,WACNY,MAAO,YACPJ,YACE,sFACFP,MAAO,oCAET,CACEF,GAAI,KACJC,KAAM,WACNY,MAAO,YACPJ,YACE,sFACFP,MAAO,oCAET,CACEF,GAAI,KACJC,KAAM,WACNY,MAAO,YACPJ,YACE,sFACFP,MAAO,oCA2DT,CACEF,GAAI,MACJC,KAAM,SACNY,MAAO,oBACPJ,YACE,+GACFP,MAAO,kCAET,CACEF,GAAI,MACJC,KAAM,SACNY,MAAO,oBACPJ,YACE,+GACFP,MAAO,kCAET,CACEF,GAAI,MACJC,KAAM,SACNY,MAAO,oBACPJ,YACE,+GACFP,MAAO,kCAET,CACEF,GAAI,MACJC,KAAM,SACNY,MAAO,oBACPJ,YACE,+GACFP,MAAO,kCAkBT,CACEF,GAAI,MACJC,KAAM,WACNY,MAAO,oBACPJ,YACE,qFACAP,MAAO,oCAEX,CACEF,GAAI,MACJC,KAAM,WACNY,MAAO,oBACPJ,YACE,qFACAP,MAAO,oCAGX,CACEF,GAAI,MACJC,KAAM,gBACNY,MAAO,QACPJ,YACE,uFACAP,MAAO,yCAwEX,CACEF,GAAI,MACJC,KAAM,gBACNY,MAAO,QACPJ,YACE,qJACAP,MAAO,yCAEX,CACEF,GAAI,MACJC,KAAM,gBACNY,MAAO,QACPJ,YACE,qJACAP,MAAO,0CAOAY,EAAW,CACtB,CACEd,GAAI,KACJC,KAAM,SACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,SACVI,YACE,2IACFO,QAAS,EACTd,MAAO,8CAET,CACEF,GAAI,KACJC,KAAM,SACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,SACVI,YACE,yIACFO,QAAS,EACTd,MAAO,8CAET,CACEF,GAAI,KACJC,KAAM,SACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,SACVI,YACE,wJACFO,QAAS,EACTd,MAAO,8CAET,CACEF,GAAI,KACJC,KAAM,SACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,SACVI,YACE,4GACFO,QAAS,EACTd,MAAO,8CAET,CACEF,GAAI,KACJC,KAAM,SACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,SACVI,YACE,iJACFO,QAAS,EACTd,MAAO,8CAET,CACEF,GAAI,KACJC,KAAM,SACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,SACVI,YACE,6KACFO,QAAS,EACTd,MAAO,8CAET,CACEF,GAAI,KACJC,KAAM,UACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,UACVI,YACE,4HACFO,QAAS,EACTd,MAAO,+CAET,CACEF,GAAI,KACJC,KAAM,UACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,UACVI,YACE,sJACFO,QAAS,EACTd,MAAO,+CAET,CACEF,GAAI,KACJC,KAAM,UACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,UACVI,YACE,wJACFO,QAAS,EACTd,MAAO,+CAET,CACEF,GAAI,MACJC,KAAM,UACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,UACVI,YACE,gFACFO,QAAS,EACTd,MAAO,+CAET,CACEF,GAAI,MACJC,KAAM,UACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,UACVI,YACE,yJACFO,QAAS,EACTd,MAAO,+CAET,CACEF,GAAI,MACJC,KAAM,UACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,UACVI,YACE,yJACFO,QAAS,EACTd,MAAO,+CAoET,CACEF,GAAI,MACJC,KAAM,QACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,QACVI,YACE,mIACFO,QAAS,EACTd,MAAO,6CAET,CACEF,GAAI,MACJC,KAAM,QACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,QACVI,YACE,2IACFO,QAAS,EACTd,MAAO,6CAET,CACEF,GAAI,MACJC,KAAM,QACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,QACVI,YACE,qNACFO,QAAS,EACTd,MAAO,6CAET,CACEF,GAAI,MACJC,KAAM,QACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,QACVI,YACE,yLACFO,QAAS,EACTd,MAAO,6CAET,CACEF,GAAI,MACJC,KAAM,QACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,QACVI,YACE,wKACFO,QAAS,EACTd,MAAO,6CAET,CACEF,GAAI,MACJC,KAAM,QACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,QACVI,YACE,mIACFO,QAAS,EACTd,MAAO,6CAET,CACEF,GAAI,MACJC,KAAM,WACNG,SAAU,gBACVW,GAAI,EACJV,SAAU,IACVI,YACE,gJACFO,QAAS,EACTd,MAAO,8CAOEe,EAAe,CAC1B,CACEjB,GAAI,KACJC,KAAM,SACNG,SAAU,YACVW,GAAI,GACJV,SAAU,SACVI,YACE,oJACFO,QAAS,EACTd,MAAO,8CAET,CACEF,GAAI,KACJC,KAAM,SACNG,SAAU,YACVW,GAAI,GACJV,SAAU,SACVI,YACE,uHACFO,QAAS,EACTd,MAAO,8CAET,CACEF,GAAI,KACJC,KAAM,SACNG,SAAU,YACVW,GAAI,GACJV,SAAU,SACVI,YACE,iKACFO,QAAS,EACTd,MAAO,8CAET,CACEF,GAAI,KACJC,KAAM,SACNG,SAAU,YACVW,GAAI,GACJV,SAAU,SACVI,YACE,sJACFO,QAAS,EACTd,MAAO,8CAET,CACEF,GAAI,KACJC,KAAM,UACNG,SAAU,YACVW,GAAI,GACJV,SAAU,UACVI,YACE,4FACFO,QAAS,EACTd,MAAO,+CAET,CACEF,GAAI,KACJC,KAAM,UACNG,SAAU,YACVW,GAAI,GACJV,SAAU,UACVI,YACE,yIACFO,QAAS,EACTd,MAAO,+CAET,CACEF,GAAI,KACJC,KAAM,UACNG,SAAU,YACVW,GAAI,GACJV,SAAU,UACVI,YACE,+HACFO,QAAS,EACTd,MAAO,+CAET,CACEF,GAAI,KACJC,KAAM,UACNG,SAAU,YACVW,GAAI,GACJV,SAAU,UACVI,YACE,0LACFO,QAAS,EACTd,MAAO,+CA8CT,CACEF,GAAI,MACJC,KAAM,QACNG,SAAU,YACVW,GAAI,GACJV,SAAU,QACVI,YACE,qHACFO,QAAS,EACTd,MAAO,6CAET,CACEF,GAAI,MACJC,KAAM,QACNG,S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","file":"static/js/main.13c9670e.chunk.js","sourcesContent":["\nexport const cardBack = {\n  id: \"A1\",\n  name: \"cardBack\",\n  image: \"/card-images/card-backs/blank_hero.svg\",\n}\n\nexport const dungeonBack = {\n  id: \"D1\",\n  name: \"cardBack\",\n  subtitle: \"blankCard\",\n  image: \"/card-images/card-backs/blank_dungeon.svg\",\n  treasure: \"\",\n}\n\nexport const blankCard = {\n  id: \"BL1\",\n  image: \"/card-images/card-backs/blank_hero.svg\",\n}\n// -------------------- 8 Boss Cards -------------------- //\n\n// shuffling algorithm is mutating array\nexport const bossDeck = [\n  // {\n  //   id: \"B1\",\n  //   name: \"Draculord\",\n  //   subtitle: \"Hypnotic Vampire\",\n  //   xp: 900,\n  //   treasure: \"Cleric\",\n  //   description:\n  //     \"Target opponent reveals his or her hand. Take one card and put it into your hand.\",\n  //   image: \"\"\n  // },\n  {\n    id: \"B2\",\n    name: \"Xyzax\",\n    subtitle: \"Progenitor Lich\",\n    xp: 750,\n    treasure: \"Cleric\",\n    // description:\n    //   \"Choose two cards from the discard pile and put them into your hand.\",\n    description: \"Level-Up functionality coming soon.\",\n    image: \"/card-images/bosses/xyzax.svg\",\n  },\n  {\n    id: \"B3\",\n    name: \"King Croak\",\n    subtitle: \"Sultan of the Sewers\",\n    xp: 800,\n    treasure: \"Fighter\",\n    // description:\n    //   \"You may search the Room Deck or discard pile for an Advanced Monster Room. You may immediately build the room (over a room with a matching Treasure type).\",\n    description: \"Level-Up functionality coming soon.\",\n    image: \"/card-images/bosses/king-croak.svg\",\n  },\n  // {\n  //   id: \"B4\",\n  //   name: \"Robobo\",\n  //   subtitle: \"Angry Golem\",\n  //   xp: 400,\n  //   treasure: \"Fighter\",\n  //   description:\n  //     \"Each opponent must choose and destroy one Room in his or her dungeon.\",\n  //   image: \"\",\n  // },\n  // {\n  //   id: \"B5\",\n  //   name: \"Cerebellus\",\n  //   subtitle: \"Father Brain\",\n  //   xp: 650,\n  //   treasure: \"Mage\",\n  //   description: \"You may draw three Spell cards, then discard a Spell card.\",\n  //   image: \"\",\n  // },\n  // {\n  //   id: \"B6\",\n  //   name: \"Seducia\",\n  //   subtitle: \"Sorceress of Sexiness\",\n  //   xp: 600,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"You may search through town or the Hero decks, choose one Hero, and put it at the entrance to your dungeon.\",\n  //   image: \"/card-images/bosses/seducia.svg\",\n  // },\n  {\n    id: \"B7\",\n    name: \"Cleopatra\",\n    subtitle: \"Mother of Mummies\",\n    xp: 850,\n    treasure: \"Thief\",\n    // description:\n    //   \"You may search the Room Deck or discard pile for an Advanced Trap Room. You may immediately build the room (over a room with a matching Treasure type).\",\n    description: \"Level-Up functionality coming soon.\",\n    image: \"/card-images/bosses/cleopatra.svg\",\n  },\n  {\n    id: \"B8\",\n    name: \"Gorgona\",\n    subtitle: \"Queen of Medusia\",\n    xp: 500,\n    treasure: \"Thief\",\n    // description:\n    //   \"Choose a Hero in town. Immediately destroy that Hero and place it face-down in your scorekeeping area.\",\n    description: \"Level-Up functionality coming soon.\",\n    image: \"/card-images/bosses/gorgona.svg\",\n  },\n];\n\n// -------------------- 75 Room Cards -------------------- //\n\n// shuffling algorithm is mutating array\nexport const roomDeck = [\n  // ----- Dark Altar 3 ----- //\n  {\n    id: \"R1\",\n    name: \"Dark Altar\",\n    subtitle: \"Trap Room\",\n    dmg: 1,\n    treasure: \"Cleric x2\",\n    description:\n      \"Destroy this Room: Choose one card from the discard pile and put it into your hand.\",\n    image: \"/card-images/rooms/dark-altar.svg\",\n  },\n  {\n    id: \"R2\",\n    name: \"Dark Altar\",\n    subtitle: \"Trap Room\",\n    dmg: 1,\n    treasure: \"Cleric x2\",\n    description:\n      \"Destroy this Room: Choose one card from the discard pile and put it into your hand.\",\n    image: \"/card-images/rooms/dark-altar.svg\",\n  },\n  {\n    id: \"R3\",\n    name: \"Dark Altar\",\n    subtitle: \"Trap Room\",\n    dmg: 1,\n    treasure: \"Cleric x2\",\n    description:\n      \"Destroy this Room: Choose one card from the discard pile and put it into your hand.\",\n    image: \"/card-images/rooms/dark-altar.svg\",\n  },\n  // ----- Open Grave 2 ----- //\n  {\n    id: \"R4\",\n    name: \"Open Grave\",\n    subtitle: \"Trap Room\",\n    dmg: 2,\n    treasure: \"Cleric\",\n    description:\n      \"Once per turn, if a Hero dies in this room, choose one Room card from the discard pile and put into your hand.\",\n    image: \"/card-images/rooms/open-grave.svg\",\n  },\n  {\n    id: \"R5\",\n    name: \"Open Grave\",\n    subtitle: \"Trap Room\",\n    dmg: 2,\n    treasure: \"Cleric\",\n    description:\n      \"Once per turn, if a Hero dies in this room, choose one Room card from the discard pile and put into your hand.\",\n    image: \"/card-images/rooms/open-grave.svg\",\n  },\n  // ----- Specter's Sanctum 3 ----- //\n  // {\n  //   id: \"R6\",\n  //   name: \"Specter's Sanctum\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 2,\n  //   treasure: \"Cleric\",\n  //   description:\n  //     \"When you build this room, choose an opponent. That opponent discards a random Spell card.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // {\n  //   id: \"R7\",\n  //   name: \"Specter's Sanctum\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 2,\n  //   treasure: \"Cleric\",\n  //   description:\n  //     \"When you build this room, choose an opponent. That opponent discards a random Spell card.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // {\n  //   id: \"R8\",\n  //   name: \"Specter's Sanctum\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 2,\n  //   treasure: \"Cleric\",\n  //   description:\n  //     \"When you build this room, choose an opponent. That opponent discards a random Spell card.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // ----- Succubus Spa 3 ----- //\n  // {\n  //   id: \"R9\",\n  //   name: \"Succubus Spa\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 1,\n  //   treasure: \"Cleric\",\n  //   description:\n  //     \"Once per turn, If a Hero Dies in this room, choose an opponent. Take a random Room or Spell card from that opponent's hand.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // {\n  //   id: \"R10\",\n  //   name: \"Succubus Spa\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 1,\n  //   treasure: \"Cleric\",\n  //   description:\n  //     \"Once per turn, If a Hero Dies in this room, choose an opponent. Take a random Room or Spell card from that opponent's hand.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // {\n  //   id: \"R11\",\n  //   name: \"Succubus Spa\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 1,\n  //   treasure: \"Cleric\",\n  //   description:\n  //     \"Once per turn, If a Hero Dies in this room, choose an opponent. Take a random Room or Spell card from that opponent's hand.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // ----- Dracolich Lair 2 ----- //\n  {\n    id: \"R12\",\n    name: \"Dracolich Lair\",\n    subtitle: \"Advanced Monster Room\",\n    dmg: 3,\n    treasure: \"Cleric\",\n    description:\n      \"Once per turn, you may discard two Room cards to choose one Room card from the discard pile and put it into your hand.\",\n    image: \"/card-images/rooms/dracolich-lair.svg\",\n  },\n  {\n    id: \"R13\",\n    name: \"Dracolich Lair\",\n    subtitle: \"Advanced Monster Room\",\n    dmg: 3,\n    treasure: \"Cleric\",\n    description:\n      \"Once per turn, you may discard two Room cards to choose one Room card from the discard pile and put it into your hand.\",\n    image: \"/card-images/rooms/dracolich-lair.svg\",\n  },\n  // ----- Vampire Bordello 2 ----- //\n  {\n    id: \"R14\",\n    name: \"Vampire Bordello\",\n    subtitle: \"Advanced Monster Room\",\n    dmg: 3,\n    treasure: \"Cleric\",\n    description:\n      \"Once per turn, if a Hero dies in this room you may heal one wound. (Flip over one of your wounds, adding its Soul value to your total.)\",\n    image: \"/card-images/rooms/vampire-bordello.svg\",\n  },\n  {\n    id: \"R15\",\n    name: \"Vampire Bordello\",\n    subtitle: \"Advanced Monster Room\",\n    dmg: 3,\n    treasure: \"Cleric\",\n    description:\n      \"Once per turn, if a Hero dies in this room you may heal one wound. (Flip over one of your wounds, adding its Soul value to your total.)\",\n    image: \"/card-images/rooms/vampire-bordello.svg\",\n  },\n  // ----- Goblin Armory 3 ----- //\n  {\n    id: \"R16\",\n    name: \"Goblin Armory\",\n    subtitle: \"Monster Room\",\n    dmg: 1,\n    treasure: \"Fighter x2\",\n    description: \"Monster Rooms adjacent to this room deal +1 damage.\",\n    image: \"/card-images/rooms/goblin-armory.svg\",\n  },\n  // {\n  //   id: \"R17\",\n  //   name: \"Goblin Armory\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 1,\n  //   treasure: \"Fighter x2\",\n  //   description: \"Monster Rooms adjacent to this room deal +1 damage.\",\n  //   image: \"/card-images/rooms/goblin-armory.svg\",\n  // },\n  // {\n  //   id: \"R18\",\n  //   name: \"Goblin Armory\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 1,\n  //   treasure: \"Fighter x2\",\n  //   description: \"Monster Rooms adjacent to this room deal +1 damage.\",\n  //   image: \"/card-images/rooms/goblin-armory.svg\",\n  // },\n  // ----- Goblin Factory 3 ----- //\n  {\n    id: \"R19\",\n    name: \"Golem Factory\",\n    subtitle: \"Monster Room\",\n    dmg: 2,\n    treasure: \"Fighter\",\n    description:\n      \"Once per turn, if a hero dies in this room, draw a Room card.\",\n    image: \"/card-images/rooms/golem-factory.svg\",\n  },\n  {\n    id: \"R20\",\n    name: \"Golem Factory\",\n    subtitle: \"Monster Room\",\n    dmg: 2,\n    treasure: \"Fighter\",\n    description:\n      \"Once per turn, if a hero dies in this room, draw a Room card.\",\n    image: \"/card-images/rooms/golem-factory.svg\",\n  },\n  // {\n  //   id: \"R21\",\n  //   name: \"Golem Factory\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 2,\n  //   treasure: \"Fighter\",\n  //   description:\n  //     \"Once per turn, if a hero dies in this room, draw a Room card.\",\n  //   image: \"/card-images/rooms/golem-factory.svg\",\n  // },\n  // ----- Minotaur's Maze 2 ----- //\n  {\n    id: \"R22\",\n    name: \"Minotaur's Maze\",\n    subtitle: \"Monster Room\",\n    dmg: 0,\n    treasure: \"Fighter\",\n    description:\n      \"The first time a Hero enters this room, send it back to the previous room.\",\n    image: \"/card-images/rooms/minotaurs-maze(1).svg\",\n  },\n  // {\n  //   id: \"R23\",\n  //   name: \"Minotaur's Maze\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 0,\n  //   treasure: \"Fighter\",\n  //   description:\n  //     \"The first time a Hero enters this room, send it back to the previous room.\",\n  //   image: \"/card-images/rooms/minotaurs-maze(2).svg\",\n  // },\n  // ----- Neanderthal Cave 3 ----- //\n  {\n    id: \"R24\",\n    name: \"Neanderthal Cave\",\n    subtitle: \"Monster Room\",\n    dmg: 3,\n    treasure: \"Fighter\",\n    description: \"You cannot build an Advanced Room on Neanderthal Cave.\",\n    image: \"/card-images/rooms/neanderthal-cave.svg\",\n  },\n  // {\n  //   id: \"R25\",\n  //   name: \"Neanderthal Cave\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 3,\n  //   treasure: \"Fighter\",\n  //   description: \"You cannot build an Advanced Room on Neanderthal Cave.\",\n  //   image: \"/card-images/rooms/neanderthal-cave.svg\",\n  // },\n  // {\n  //   id: \"R26\",\n  //   name: \"Neanderthal Cave\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 3,\n  //   treasure: \"Fighter\",\n  //   description: \"You cannot build an Advanced Room on Neanderthal Cave.\",\n  //   image: \"/card-images/rooms/neanderthal-cave.svg\",\n  // },\n  // ----- Beast Menagerie 2 ----- //\n  {\n    id: \"R27\",\n    name: \"Beast Menagerie\",\n    subtitle: \"Advanced Monster Room\",\n    dmg: 4,\n    treasure: \"Fighter\",\n    description:\n      \"Once per turn when you build another Monster room, draw a Room card.\",\n    image: \"/card-images/rooms/beast-menagerie.svg\",\n  },\n  // {\n  //   id: \"R28\",\n  //   name: \"Beast Menagerie\",\n  //   subtitle: \"Advanced Monster Room\",\n  //   dmg: 4,\n  //   treasure: \"Fighter\",\n  //   description:\n  //     \"Once per turn when you build another Monster room, draw a Room card.\",\n  //   image: \"/card-images/rooms/beast-menagerie.svg\",\n  // },\n  // ----- Monster's Ballroom 2 ----- //\n  {\n    id: \"R29\",\n    name: \"Monster's Ballroom\",\n    subtitle: \"Advanced Monster Room\",\n    dmg: \"*\",\n    treasure: \"Fighter\",\n    description:\n      \"This room's damage is equal to the number of Monster rooms in your dungeon.\",\n    image: \"/card-images/rooms/monsters-ballroom.svg\",\n  },\n  // {\n  //   id: \"R30\",\n  //   name: \"Monster's Ballroom\",\n  //   subtitle: \"Advanced Monster Room\",\n  //   dmg: \"*\",\n  //   treasure: \"Fighter\",\n  //   description:\n  //     \"This room's damage is equal to the number of Monster rooms in your dungeon.\",\n  //   image: \"/card-images/rooms/monsters-ballroom.svg\",\n  // },\n  // // ----- Brainsucker Hive 3 ----- //\n  // {\n  //   id: \"R31\",\n  //   name: \"Brainsucker Hive\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 2,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Once per turn, if a Hero dies in this room, you may draw a Spell card.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // {\n  //   id: \"R32\",\n  //   name: \"Brainsucker Hive\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 2,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Once per turn, if a Hero dies in this room, you may draw a Spell card.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // {\n  //   id: \"R33\",\n  //   name: \"Brainsucker Hive\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 2,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Once per turn, if a Hero dies in this room, you may draw a Spell card.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // // ----- Dark Laboratory 3 ----- //\n  // {\n  //   id: \"R34\",\n  //   name: \"Dark Laboratory\",\n  //   subtitle: \"Trap Room\",\n  //   dmg: 1,\n  //   treasure: \"Mage x2\",\n  //   description:\n  //     \"When you build this room, draw two spell cards, then discard a Spell card.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // {\n  //   id: \"R35\",\n  //   name: \"Dark Laboratory\",\n  //   subtitle: \"Trap Room\",\n  //   dmg: 1,\n  //   treasure: \"Mage x2\",\n  //   description:\n  //     \"When you build this room, draw two spell cards, then discard a Spell card.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // {\n  //   id: \"R36\",\n  //   name: \"Dark Laboratory\",\n  //   subtitle: \"Trap Room\",\n  //   dmg: 1,\n  //   treasure: \"Mage x2\",\n  //   description:\n  //     \"When you build this room, draw two spell cards, then discard a Spell card.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // ----- Haunted Library 2 ----- //\n  // {\n  //   id: \"R37\",\n  //   name: \"Haunted Library\",\n  //   subtitle: \"Trap Room\",\n  //   dmg: 1,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"At the beginning of your turn, you may draw from the Spell deck instead of the Room deck.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // {\n  //   id: \"R38\",\n  //   name: \"Haunted Library\",\n  //   subtitle: \"Trap Room\",\n  //   dmg: 1,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"At the beginning of your turn, you may draw from the Spell deck instead of the Room deck.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // // ----- Witch's Kitchen 3 ----- //\n  // {\n  //   id: \"R39\",\n  //   name: \"Witch's Kitchen\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 1,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Once per turn, you may discard a Monster Room card to draw a Spell card.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // {\n  //   id: \"R40\",\n  //   name: \"Witch's Kitchen\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 1,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Once per turn, you may discard a Monster Room card to draw a Spell card.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // {\n  //   id: \"R41\",\n  //   name: \"Witch's Kitchen\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 1,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Once per turn, you may discard a Monster Room card to draw a Spell card.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // // ----- All-Seeing Eye 2 ----- //\n  // {\n  //   id: \"R42\",\n  //   name: \"All-Seeing Eye\",\n  //   subtitle: \"Advanced Trap Room\",\n  //   dmg: 3,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Once per turn when an opponent plays a Spell card, you may discard a Spell card to cancel its effect.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // {\n  //   id: \"R43\",\n  //   name: \"All-Seeing Eye\",\n  //   subtitle: \"Advanced Trap Room\",\n  //   dmg: 3,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Once per turn when an opponent plays a Spell card, you may discard a Spell card to cancel its effect.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // // ----- Liger's Den 2 ----- //\n  // {\n  //   id: \"R44\",\n  //   name: \"Liger's Den\",\n  //   subtitle: \"Advanced Monster Room\",\n  //   dmg: 2,\n  //   treasure: \"Mage\",\n  //   description: \"Once per turn when you play a Spell card, draw a Spell card.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // {\n  //   id: \"R45\",\n  //   name: \"Liger's Den\",\n  //   subtitle: \"Advanced Monster Room\",\n  //   dmg: 2,\n  //   treasure: \"Mage\",\n  //   description: \"Once per turn when you play a Spell card, draw a Spell card.\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // // ----- Bottomless Pit 3 ----- //\n  {\n    id: \"R46\",\n    name: \"Bottomless Pit\",\n    subtitle: \"Trap Room\",\n    dmg: 1,\n    treasure: \"Thief\",\n    description: \"Destroy this room: Kill a Hero in this room.\",\n    image: \"/card-images/rooms/bottomless-pit.svg\",\n  },\n  {\n    id: \"R47\",\n    name: \"Bottomless Pit\",\n    subtitle: \"Trap Room\",\n    dmg: 1,\n    treasure: \"Thief\",\n    description: \"Destroy this room: Kill a Hero in this room.\",\n    image: \"/card-images/rooms/bottomless-pit.svg\",\n  },\n  {\n    id: \"R48\",\n    name: \"Bottomless Pit\",\n    subtitle: \"Trap Room\",\n    dmg: 1,\n    treasure: \"Thief\",\n    description: \"Destroy this room: Kill a Hero in this room.\",\n    image: \"/card-images/rooms/bottomless-pit.svg\",\n  },\n  // ----- Monster's Ballroom 2 ----- //\n  {\n    id: \"R49\",\n    name: \"Boulder Ramp\",\n    subtitle: \"Trap Room\",\n    dmg: 1,\n    treasure: \"Thief\",\n    description:\n      \"Destroy another room in your dungeon: Deal 5 damage to a hero in this room.\",\n    image: \"/card-images/rooms/boulder-ramp.svg\",\n  },\n  {\n    id: \"R50\",\n    name: \"Boulder Ramp\",\n    subtitle: \"Trap Room\",\n    dmg: 1,\n    treasure: \"Thief\",\n    description:\n      \"Destroy another room in your dungeon: Deal 5 damage to a hero in this room.\",\n    image: \"/card-images/rooms/boulder-ramp.svg\",\n  },\n  // ----- Dizzygas Hallway 3 ----- //\n  {\n    id: \"R51\",\n    name: \"Dizzygas Hallway\",\n    subtitle: \"Trap Room\",\n    dmg: 1,\n    treasure: \"Thief\",\n    description:\n      \"If the next room in your dungeon is a Trap room, it has +2 damage.\",\n    image: \"/card-images/rooms/dizzygas-hallway.svg\",\n  },\n  {\n    id: \"R52\",\n    name: \"Dizzygas Hallway\",\n    subtitle: \"Trap Room\",\n    dmg: 1,\n    treasure: \"Thief\",\n    description:\n      \"If the next room in your dungeon is a Trap room, it has +2 damage.\",\n    image: \"/card-images/rooms/dizzygas-hallway.svg\",\n  },\n  {\n    id: \"R53\",\n    name: \"Dizzygas Hallway\",\n    subtitle: \"Trap Room\",\n    dmg: 1,\n    treasure: \"Thief\",\n    description:\n      \"If the next room in your dungeon is a Trap room, it has +2 damage.\",\n    image: \"/card-images/rooms/dizzygas-hallway.svg\",\n  },\n  // ----- Jackpot Stash 3 ----- //\n  // {\n  //   id: \"R54\",\n  //   name: \"Jackpot Stash\",\n  //   subtitle: \"Trap Room\",\n  //   dmg: 1,\n  //   treasure: \"Thief x2\",\n  //   description:\n  //     \"Destroy this room: Double the treasure value of your dungeon's Rooms until end of turn.\",\n  //   image: \"/card-images/rooms/jackpot-stash.svg\",\n  // },\n  // {\n  //   id: \"R55\",\n  //   name: \"Jackpot Stash\",\n  //   subtitle: \"Trap Room\",\n  //   dmg: 1,\n  //   treasure: \"Thief x2\",\n  //   description:\n  //     \"Destroy this room: Double the treasure value of your dungeon's Rooms until end of turn.\",\n  //   image: \"/card-images/rooms/jackpot-stash.svg\",\n  // },\n  // {\n  //   id: \"R56\",\n  //   name: \"Jackpot Stash\",\n  //   subtitle: \"Trap Room\",\n  //   dmg: 1,\n  //   treasure: \"Thief x2\",\n  //   description:\n  //     \"Destroy this room: Double the treasure value of your dungeon's Rooms until end of turn.\",\n  //   image: \"/card-images/rooms/jackpot-stash.svg\",\n  // },\n  // ----- Recycling Center 2 ----- //\n  {\n    id: \"R57\",\n    name: \"Recycling Center\",\n    subtitle: \"Advanced Trap Room\",\n    dmg: 3,\n    treasure: \"Thief\",\n    description:\n      \"When another room in your dungeon is destroyed, you may draw two Room cards.\",\n    image: \"/card-images/rooms/recycling-center.svg\",\n  },\n  {\n    id: \"R58\",\n    name: \"Recycling Center\",\n    subtitle: \"Advanced Trap Room\",\n    dmg: 3,\n    treasure: \"Thief\",\n    description:\n      \"When another room in your dungeon is destroyed, you may draw two Room cards.\",\n    image: \"/card-images/rooms/recycling-center.svg\",\n  },\n  // ----- The Crushinator 2 ----- //\n  {\n    id: \"R59\",\n    name: \"The Crushinator\",\n    subtitle: \"Advanced Trap Room\",\n    dmg: 2,\n    treasure: \"Thief\",\n    description:\n      \"Destroy another room in your dungeon: Until end of turn, your Rooms have +2 damage.\",\n    image: \"/card-images/rooms/the-crushinator.svg\",\n  },\n  {\n    id: \"R60\",\n    name: \"The Crushinator\",\n    subtitle: \"Advanced Trap Room\",\n    dmg: 2,\n    treasure: \"Thief\",\n    description:\n      \"Destroy another room in your dungeon: Until end of turn, your Rooms have +2 damage.\",\n    image: \"/card-images/rooms/the-crushinator.svg\",\n  },\n  // ----- Centipede Tunnel 2 ----- //\n  {\n    id: \"R61\",\n    name: \"Centipede Tunnel\",\n    subtitle: \"Monster Room\",\n    dmg: 1,\n    treasure: \"Fighter + Mage\",\n    description:\n      \"When you build this room, you may swap the placement of two Rooms in any one dungeon.\",\n    image: \"/card-images/rooms/centipede-tunnel.svg\",\n  },\n  {\n    id: \"R62\",\n    name: \"Centipede Tunnel\",\n    subtitle: \"Monster Room\",\n    dmg: 1,\n    treasure: \"Fighter + Mage\",\n    description:\n      \"When you build this room, you may swap the placement of two Rooms in any one dungeon.\",\n    image: \"/card-images/rooms/centipede-tunnel.svg\",\n  },\n  // ----- Construction Zone 2 ----- //\n  {\n    id: \"R63\",\n    name: \"Construction Zone\",\n    subtitle: \"Trap Room\",\n    dmg: 1,\n    treasure: \"Fighter + Thief\",\n    description:\n      \"When you build this room, you may immediately build an additional Room.\",\n    image: \"/card-images/rooms/construction-zone.svg\",\n  },\n  {\n    id: \"R64\",\n    name: \"Construction Zone\",\n    subtitle: \"Trap Room\",\n    dmg: 1,\n    treasure: \"Fighter + Thief\",\n    description:\n      \"When you build this room, you may immediately build an additional Room.\",\n    image: \"/card-images/rooms/construction-zone.svg\",\n  },\n  // ----- Dragon Hatchery 3 ----- //\n  {\n    id: \"R65\",\n    name: \"Dragon Hatchery\",\n    subtitle: \"Monster Room\",\n    dmg: 0,\n    treasure: \"Cleric + Mage + Fighter + Thief\",\n    description: \"(This room contains all four treasure types.)\",\n    image: \"/card-images/rooms/dragon-hatchery.svg\",\n  },\n  {\n    id: \"R66\",\n    name: \"Dragon Hatchery\",\n    subtitle: \"Monster Room\",\n    dmg: 0,\n    treasure: \"Cleric + Mage + Fighter + Thief\",\n    description: \"(This room contains all four treasure types.)\",\n    image: \"/card-images/rooms/dragon-hatchery.svg\",\n  },\n  {\n    id: \"R67\",\n    name: \"Dragon Hatchery\",\n    subtitle: \"Monster Room\",\n    dmg: 0,\n    treasure: \"Cleric + Mage + Fighter + Thief\",\n    description: \"(This room contains all four treasure types.)\",\n    image: \"/card-images/rooms/dragon-hatchery.svg\",\n  },\n  // ----- Mimic Vault 2 ----- //\n  // {\n  //   id: \"R68\",\n  //   name: \"Mimic Vault\",\n  //   subtitle: \"Trap Room\",\n  //   dmg: 1,\n  //   treasure: \"Mage + Thief\",\n  //   description:\n  //     \"When you build this room, choose one ordinary Hero in town and place it on the entrance to your dungeon.\",\n  //   image: \"/card-images/rooms/mimic-vault.svg\",\n  // },\n  // {\n  //   id: \"R69\",\n  //   name: \"Mimic Vault\",\n  //   subtitle: \"Trap Room\",\n  //   dmg: 1,\n  //   treasure: \"Mage + Thief\",\n  //   description:\n  //     \"When you build this room, choose one ordinary Hero in town and place it on the entrance to your dungeon.\",\n  //   image: \"/card-images/rooms/mimic-vault.svg\",\n  // },\n  // ----- Monstrous Monument 2 ----- //\n  {\n    id: \"R70\",\n    name: \"Monstrous Monument\",\n    subtitle: \"Trap Room\",\n    dmg: 1,\n    treasure: \"Cleric + Fighter\",\n    description:\n      \"When you build this room, choose one Monster Room from the discard pile and put it in your hand.\",\n    image: \"/card-images/rooms/monstrous-monument.svg\",\n  },\n  {\n    id: \"R71\",\n    name: \"Monstrous Monument\",\n    subtitle: \"Trap Room\",\n    dmg: 1,\n    treasure: \"Cleric + Fighter\",\n    description:\n      \"When you build this room, choose one Monster Room from the discard pile and put it in your hand.\",\n    image: \"/card-images/rooms/monstrous-monument.svg\",\n  },\n  // // ----- Torture Chamber 2 ----- //\n  // {\n  //   id: \"R72\",\n  //   name: \"Torture Chamber\",\n  //   subtitle: \"Trap Room\",\n  //   dmg: 1,\n  //   treasure: \"Cleric + Thief\",\n  //   description:\n  //     \"Destroy this room: Choose an opponent. That opponent discards a random Room card.\t\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // {\n  //   id: \"R73\",\n  //   name: \"Torture Chamber\",\n  //   subtitle: \"Trap Room\",\n  //   dmg: 1,\n  //   treasure: \"Cleric + Thief\",\n  //   description:\n  //     \"Destroy this room: Choose an opponent. That opponent discards a random Room card.\t\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // // ----- Zombie Prison 2 ----- //\n  // {\n  //   id: \"R74\",\n  //   name: \"Zombie Prison\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 1,\n  //   treasure: \"Cleric + Mage\",\n  //   description:\n  //     \"Destroy this room: Choose a dead Hero in an opponent's scorekeeping area. Send it back to the entrance of that player's dungeon\",\n  //   image: \"/card-images/rooms/\",\n  // },\n  // {\n  //   id: \"R75\",\n  //   name: \"Zombie Prison\",\n  //   subtitle: \"Monster Room\",\n  //   dmg: 1,\n  //   treasure: \"Cleric + Mage\",\n  //   description:\n  //     \"Destroy this room: Choose a dead Hero in an opponent's scorekeeping area. Send it back to the entrance of that player's dungeon\",\n  //   image: \"/card-images/rooms/\",\n  // },\n];\n\n// -------------------- 31 Spell Cards -------------------- //\n\n// shuffling algorithm is mutating array\nexport const spellDeck = [\n  // // ----- Annihilator 2 ----- //\n  // {\n  //   id: \"S1\",\n  //   name: \"Annihilator\",\n  //   phase: \"Adventure\",\n  //   description: \"Give one Trap Room +3 damage until end of turn.\",\n  //   image: \"/card-images/spells/\",\n  // },\n  // {\n  //   id: \"S2\",\n  //   name: \"Annihilator\",\n  //   phase: \"Adventure\",\n  //   description: \"Give one Trap Room +3 damage until end of turn.\",\n  //   image: \"/card-images/spells/\",\n  // },\n  // ----- Assassin 3 ----- //\n  {\n    id: \"S3\",\n    name: \"Assassin\",\n    phase: \"Adventure\",\n    description:\n      \"Choose a Hero in an opponent's dungeon. Give that Hero +3 Health until end of turn.\",\n    image: \"/card-images/spells/assassin.svg\",\n  },\n  {\n    id: \"S4\",\n    name: \"Assassin\",\n    phase: \"Adventure\",\n    description:\n      \"Choose a Hero in an opponent's dungeon. Give that Hero +3 Health until end of turn.\",\n    image: \"/card-images/spells/assassin.svg\",\n  },\n  {\n    id: \"S5\",\n    name: \"Assassin\",\n    phase: \"Adventure\",\n    description:\n      \"Choose a Hero in an opponent's dungeon. Give that Hero +3 Health until end of turn.\",\n    image: \"/card-images/spells/assassin.svg\",\n  },\n  // // ----- Cave-In 2 ----- //\n  // {\n  //   id: \"S6\",\n  //   name: \"Cave-In\",\n  //   phase: \"Adventure\",\n  //   description: \"Destroy a room in your dungeon. Kill any Hero in that Room.\",\n  //   image: \"/card-images/spells/\",\n  // },\n  // {\n  //   id: \"S7\",\n  //   name: \"Cave-In\",\n  //   phase: \"Adventure\",\n  //   description: \"Destroy a room in your dungeon. Kill any Hero in that Room.\",\n  //   image: \"/card-images/spells/\",\n  // },\n  // // ----- Counterspell 2 ----- //\n  // {\n  //   id: \"S8\",\n  //   name: \"Counterspell\",\n  //   phase: \"Build & Adventure\",\n  //   description:\n  //     \"Choose a Spell card that has just been declared. Cancel the effects of that Spell card. (The canceled Spell card is sent to the discard pile.)\",\n  //   image: \"/card-images/spells/\",\n  // },\n  // {\n  //   id: \"S9\",\n  //   name: \"Counterspell\",\n  //   phase: \"Build & Adventure\",\n  //   description:\n  //     \"Choose a Spell card that has just been declared. Cancel the effects of that Spell card. (The canceled Spell card is sent to the discard pile.)\",\n  //   image: \"/card-images/spells/\",\n  // },\n  // // ----- Exhaustion 1 ----- //\n  // {\n  //   id: \"S10\",\n  //   name: \"Exhaustion\",\n  //   phase: \"Adventure\",\n  //   description:\n  //     \"Deal X damage to one Hero in your dungeon, where X is equal to the number of rooms in your dungeon.\",\n  //   image: \"/card-images/spells/\",\n  // },\n  // // ----- Fear 2 ----- //\n  // {\n  //   id: \"S11\",\n  //   name: \"Fear\",\n  //   phase: \"Adventure\",\n  //   description: \"Choose a Hero in any dungeon and send it back to town.\",\n  //   image: \"/card-images/spells/\",\n  // },\n  // {\n  //   id: \"S12\",\n  //   name: \"Fear\",\n  //   phase: \"Adventure\",\n  //   description: \"Choose a Hero in any dungeon and send it back to town.\",\n  //   image: \"/card-images/spells/\",\n  // },\n  // // ----- Freeze 4 ----- //\n  {\n    id: \"S13\",\n    name: \"Freeze\",\n    phase: \"Build & Adventure\",\n    description:\n      \"Choose and deactivate one Room in any dungeon. (It has no damage, treasure, or abilities until end of turn.)\",\n    image: \"/card-images/spells/freeze.svg\",\n  },\n  {\n    id: \"S14\",\n    name: \"Freeze\",\n    phase: \"Build & Adventure\",\n    description:\n      \"Choose and deactivate one Room in any dungeon. (It has no damage, treasure, or abilities until end of turn.)\",\n    image: \"/card-images/spells/freeze.svg\",\n  },\n  {\n    id: \"S15\",\n    name: \"Freeze\",\n    phase: \"Build & Adventure\",\n    description:\n      \"Choose and deactivate one Room in any dungeon. (It has no damage, treasure, or abilities until end of turn.)\",\n    image: \"/card-images/spells/freeze.svg\",\n  },\n  {\n    id: \"S16\",\n    name: \"Freeze\",\n    phase: \"Build & Adventure\",\n    description:\n      \"Choose and deactivate one Room in any dungeon. (It has no damage, treasure, or abilities until end of turn.)\",\n    image: \"/card-images/spells/freeze.svg\",\n  },\n  // // ----- Giant Size 2 ----- //\n  // {\n  //   id: \"S17\",\n  //   name: \"Giant Size\",\n  //   phase: \"Adventure\",\n  //   description: \"Give one Monster Room +3 damage until end of turn.\",\n  //   image: \"/card-images/spells/,\n  // },\n  // {\n  //   id: \"S18\",\n  //   name: \"Giant Size\",\n  //   phase: \"Adventure\",\n  //   description: \"Give one Monster Room +3 damage until end of turn.\",\n  //   image: \"/card-images/spells/,\n  // },\n  // ----- Jeopardy 2 ----- //\n  {\n    id: \"S19\",\n    name: \"Jeopardy\",\n    phase: \"Build & Adventure\",\n    description:\n      \"All players must discard their hands, then draw one Spell card and two Room cards.\",\n      image: \"/card-images/spells/jeopardy.svg\",\n  },\n  {\n    id: \"S20\",\n    name: \"Jeopardy\",\n    phase: \"Build & Adventure\",\n    description:\n      \"All players must discard their hands, then draw one Spell card and two Room cards.\",\n      image: \"/card-images/spells/jeopardy.svg\",\n  },\n  // ----- Kobold Strike 1 ----- //\n  {\n    id: \"S21\",\n    name: \"Kobold Strike\",\n    phase: \"Build\",\n    description:\n      \"No rooms can be built this turn. Any face-down Room is returned to its owner's hand.\",\n      image: \"/card-images/spells/kobold-strike.svg\",\n  },\n  // // ----- Motivation 2 ----- //\n  // {\n  //   id: \"S22\",\n  //   name: \"Motivation\",\n  //   phase: \"Build\",\n  //   description:\n  //     \"If you have fewer Rooms than an opponent, you may build an extra room this turn. (You must declare this before any Rooms are revealed.)\",\n  //   image: \"\",\n  // },\n  // {\n  //   id: \"S23\",\n  //   name: \"Motivation\",\n  //   phase: \"Build\",\n  //   description:\n  //     \"If you have fewer Rooms than an opponent, you may build an extra room this turn. (You must declare this before any Rooms are revealed.)\",\n  //   image: \"\",\n  // },\n  // // ----- Princess in Peril 2 ----- //\n  // {\n  //   id: \"S24\",\n  //   name: \"Princess in Peril\",\n  //   phase: \"Build\",\n  //   description:\n  //     \"Choose one Hero in town. Place it at the entrance to your dungeon.\",\n  //   image: \"\",\n  // },\n  // {\n  //   id: \"S25\",\n  //   name: \"Princess in Peril\",\n  //   phase: \"Build\",\n  //   description:\n  //     \"Choose one Hero in town. Place it at the entrance to your dungeon.\",\n  //   image: \"\",\n  // },\n  // // ----- Soul Harvest 1 ----- //\n  // {\n  //   id: \"S26\",\n  //   name: \"Soul Harvest\",\n  //   phase: \"Build & Adventure\",\n  //   description:\n  //     \"Choose a face-down Hero in your scorekeeping area and remove it from the game. Draw two Spell cards.\",\n  //   image: \"\",\n  // },\n  // // ----- Teleportation 2 ----- //\n  // {\n  //   id: \"S27\",\n  //   name: \"Teleportation\",\n  //   phase: \"Adventure\",\n  //   description:\n  //     \"Send a Hero in your dungeon back to the first room of your dungeon. (It continues to move through your dungeon this turn.)\",\n  //   image: \"\",\n  // },\n  // {\n  //   id: \"S28\",\n  //   name: \"Teleportation\",\n  //   phase: \"Adventure\",\n  //   description:\n  //     \"Send a Hero in your dungeon back to the first room of your dungeon. (It continues to move through your dungeon this turn.)\",\n  //   image: \"\",\n  // },\n  // // ----- Trepidation 1 ----- //\n  // {\n  //   id: \"S29\",\n  //   name: \"Trepidation\",\n  //   phase: \"Adventure\",\n  //   description:\n  //     \"Choose a player with at least two more Souls than you. No Hero enters that player's dungeon this turn. (Any Heroes remain at the entrance to that dungeon.)\",\n  //   image: \"\",\n  // },\n  // ----- Zombie Attack 2 ----- //\n  {\n    id: \"S30\",\n    name: \"Zombie Attack\",\n    phase: \"Build\",\n    description:\n      \"Choose a dead Hero in an opponent's scorekeeping area. Send it back to the entrance of that player's dungeon. Until end of turn, it has +2 Health.\",\n      image: \"/card-images/spells/zombie-attack.svg\",\n  },\n  {\n    id: \"S31\",\n    name: \"Zombie Attack\",\n    phase: \"Build\",\n    description:\n      \"Choose a dead Hero in an opponent's scorekeeping area. Send it back to the entrance of that player's dungeon. Until end of turn, it has +2 Health.\",\n      image: \"/card-images/spells/zombie-attack.svg\",\n  },\n];\n\n// -------------------- 25 Hero Cards -------------------- //\n\n// shuffling algorithm is mutating array\nexport const heroDeck = [\n  {\n    id: \"H1\",\n    name: \"Cleric\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 4,\n    treasure: \"Cleric\",\n    description:\n      \"Nick the Masher The young cleric was well-armed, and brave enough to take on the Dragon King himself. His credo: I bash it with my mace.\",\n    players: 2,\n    image: \"/card-images/heroes/cleric-ordinary(1).svg\",\n  },\n  {\n    id: \"H2\",\n    name: \"Cleric\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 4,\n    treasure: \"Cleric\",\n    description:\n      \"Pugi the Druidess A defender of the wilderness, she wields the power of Nature. Flowers blossom in her footsteps, and life grows anew.\",\n    players: 4,\n    image: \"/card-images/heroes/cleric-ordinary(2).svg\",\n  },\n  {\n    id: \"H3\",\n    name: \"Cleric\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 6,\n    treasure: \"Cleric\",\n    description:\n      \"Acacia, Warrior of Light Acacia is a carefree soul who makes her own luck. A strong defender of good, she is undeterred by even the darkest dungeons.\",\n    players: 2,\n    image: \"/card-images/heroes/cleric-ordinary(3).svg\",\n  },\n  {\n    id: \"H4\",\n    name: \"Cleric\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 6,\n    treasure: \"Cleric\",\n    description:\n      \"Charles the Young Charles has mother's permission to go adventuring, but he has to return before sundown.\",\n    players: 3,\n    image: \"/card-images/heroes/cleric-ordinary(4).svg\",\n  },\n  {\n    id: \"H5\",\n    name: \"Cleric\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 8,\n    treasure: \"Cleric\",\n    description:\n      \"Delatorious, Angel of Light Created by the Goddess of Light to defend Arcadia, this kid angel never misses a shot with his enchanted crossbow.\",\n    players: 2,\n    image: \"/card-images/heroes/cleric-ordinary(5).svg\",\n  },\n  {\n    id: \"H6\",\n    name: \"Cleric\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 8,\n    treasure: \"Cleric\",\n    description:\n      \"Romero, the Indigo Friar He is a dedicated man of the cloth who wants to see the world coated in blue. You might think he's depressed, but he's actually very, very happy.\",\n    players: 4,\n    image: \"/card-images/heroes/cleric-ordinary(6).svg\",\n  },\n  {\n    id: \"H7\",\n    name: \"Fighter\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 4,\n    treasure: \"Fighter\",\n    description:\n      \"Boden the Pantless Boden's courage is matched only by his forgetfulness. The quest to find his misplaced armor continues!\",\n    players: 2,\n    image: \"/card-images/heroes/fighter-ordinary(1).svg\",\n  },\n  {\n    id: \"H8\",\n    name: \"Fighter\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 4,\n    treasure: \"Fighter\",\n    description:\n      \"Jarek, Squire to the Lion Knights As a squire, Jarek loved nothing more than stories and legends. He had no idea that someday, he would become one.\",\n    players: 4,\n    image: \"/card-images/heroes/fighter-ordinary(2).svg\",\n  },\n  {\n    id: \"H9\",\n    name: \"Fighter\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 6,\n    treasure: \"Fighter\",\n    description:\n      \"Fire's Breath, Heroine of Arcadia The scarlet-haired warrior woman known as Fire's Breath has pledged her deadly twin blades to the fight for liberty\",\n    players: 2,\n    image: \"/card-images/heroes/fighter-ordinary(3).svg\",\n  },\n  {\n    id: \"H10\",\n    name: \"Fighter\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 6,\n    treasure: \"Fighter\",\n    description:\n      \"Samurai Tom Not truly a samurai, this masterless ronin seeks honor and glory.\",\n    players: 3,\n    image: \"/card-images/heroes/fighter-ordinary(4).svg\",\n  },\n  {\n    id: \"H11\",\n    name: \"Fighter\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 8,\n    treasure: \"Fighter\",\n    description:\n      \"Johnny of the Evening Watch A humble member of the Evening Watch, whose band o'brothers is sworn to forsake family, take the grey, and clear dungeons.\",\n    players: 2,\n    image: \"/card-images/heroes/fighter-ordinary(5).svg\",\n  },\n  {\n    id: \"H12\",\n    name: \"Fighter\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 8,\n    treasure: \"Fighter\",\n    description:\n      \"Crystol and A'lan of Gerd Bound by the unbreakable Ring of Gerd, these lovers became the most dangerous husband-wife team in the adventuring business.\",\n    players: 4,\n    image: \"/card-images/heroes/fighter-ordinary(6).svg\",\n  },\n  // {\n  //   id: \"H13\",\n  //   name: \"Mage\",\n  //   subtitle: \"Ordinary-Hero\",\n  //   HP: 4,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Tieg and the Magic Bubble Armed with his trusty bubble, Tieg braves dangerous castles and dungeons in search of the musical instruments stolen from his people.\",\n  //   players: 2,\n  //   image: \"/card-images/heroes/mage-ordinary(1).svg\",\n  // },\n  // {\n  //   id: \"H14\",\n  //   name: \"Mage\",\n  //   subtitle: \"Ordinary-Hero\",\n  //   HP: 4,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Brandork the Neverwrong Schooled in seven flavors of magic, Brandork follows the teachings of master Face, the Omniscient Celestial.\",\n  //   players: 4,\n  //   image: \"/card-images/heroes/mage-ordinary(2).svg\",\n  // },\n  // {\n  //   id: \"H15\",\n  //   name: \"Mage\",\n  //   subtitle: \"Ordinary-Hero\",\n  //   HP: 6,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Mitchell, the Judge He has wandered the planes, hopelessly lost... ever since his wife, Nikki, sent him to the store for diamond dust sugar.\",\n  //   players: 2,\n  //   image: \"/card-images/heroes/mage-ordinary(3).svg\",\n  // },\n  // {\n  //   id: \"H16\",\n  //   name: \"Mage\",\n  //   subtitle: \"Ordinary-Hero\",\n  //   HP: 6,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Kalish Ninefingers The worst thief ever, Kalish lost a finger and his freedom in one night. Taught magic in prison by his sorcerous cellmate, he now kills evil with fire.\",\n  //   players: 3,\n  //   image: \"/card-images/heroes/mage-ordinary(4).svg\",\n  // },\n  // {\n  //   id: \"H17\",\n  //   name: \"Mage\",\n  //   subtitle: \"Ordinary-Hero\",\n  //   HP: 8,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Dartteon, Elf Pyromancer Some elves just want to watch the world burn.\",\n  //   players: 2,\n  //   image: \"/card-images/heroes/mage-ordinary(5).svg\",\n  // },\n  // {\n  //   id: \"H18\",\n  //   name: \"Mage\",\n  //   subtitle: \"Ordinary-Hero\",\n  //   HP: 8,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Koey, The Last Dragon Mage The survivor of Drakonia vowed to save the world from Kirax's reign with the power bestowed to him by the last emerald dragon.\",\n  //   players: 4,\n  //   image: \"/card-images/heroes/mage-ordinary(6).svg\",\n  // },\n  {\n    id: \"H19\",\n    name: \"Thief\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 4,\n    treasure: \"Thief\",\n    description:\n      \"Joman Chimm, Cutpurse From the twinkle in his eye, you might think he comes bearing gifts... until you check your empty pockets.\",\n    players: 2,\n    image: \"/card-images/heroes/thief-ordinary(1).svg\",\n  },\n  {\n    id: \"H20\",\n    name: \"Thief\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 4,\n    treasure: \"Thief\",\n    description:\n      \"Lance Uppercut, Treasure Hunter With a bent blade and a clenched fist, he gathers shining treasures for the glory of the Keonish Empire.\",\n    players: 4,\n    image: \"/card-images/heroes/thief-ordinary(2).svg\",\n  },\n  {\n    id: \"H21\",\n    name: \"Thief\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 6,\n    treasure: \"Thief\",\n    description:\n      \"Jesta the Rogue \\\"Okay, so you take the big guy on the left with the axe, you've got the two little ones on the right with swords, and I'll take this dangerous-looking treasure chest with no lock over here...\\\"\",\n    players: 2,\n    image: \"/card-images/heroes/thief-ordinary(3).svg\",\n  },\n  {\n    id: \"H22\",\n    name: \"Thief\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 6,\n    treasure: \"Thief\",\n    description:\n      \"Kins Klauski, Mad Conquistador \\\"It's hard for me to think about death, how insects and worms will eat me... I never think about death. I haven't even properly started to live yet.\\\"\",\n    players: 3,\n    image: \"/card-images/heroes/thief-ordinary(4).svg\",\n  },\n  {\n    id: \"H23\",\n    name: \"Thief\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 8,\n    treasure: \"Thief\",\n    description:\n      \"Sir Digby Apple, Ace Detective He battles to keep the coffers filling, to keep his partners preening and to send a needless message of power to all of the unwilling.\",\n    players: 2,\n    image: \"/card-images/heroes/thief-ordinary(5).svg\",\n  },\n  {\n    id: \"H24\",\n    name: \"Thief\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 8,\n    treasure: \"Thief\",\n    description:\n      \"Jerome, Kung Fu Monkey A Visitor from a distant land, his hyperactive monkey studied martial arts under the legendary Sifu Wang.\",\n    players: 4,\n    image: \"/card-images/heroes/thief-ordinary(6).svg\",\n  },\n  {\n    id: \"H25\",\n    name: \"The Fool\",\n    subtitle: \"Ordinary-Hero\",\n    HP: 2,\n    treasure: \"?\",\n    description:\n      \"The Fool is lured to the dungeon of the Boss Monster with the fewest Souls. (In the case of a tie, he waits in town until the tie is broken.)\",\n    players: 2,\n    image: \"/card-images/heroes/the-fool-ordinary.svg\",\n  },\n];\n\n// -------------------- 16 Epic-Hero Cards -------------------- //\n\n// shuffling algorithm is mutating array\nexport const epicHeroDeck = [\n  {\n    id: \"E1\",\n    name: \"Cleric\",\n    subtitle: \"Epic-Hero\",\n    HP: 11,\n    treasure: \"Cleric\",\n    description:\n      'Katelyn, Angelic Healer Among the most exalted defenders of righteousness, Katelyn is sometimes referred to as \"altissima luce\" -- highest light.',\n    players: 2,\n    image: \"card-images/epic-heroes/cleric-epic(1).svg\",\n  },\n  {\n    id: \"E2\",\n    name: \"Cleric\",\n    subtitle: \"Epic-Hero\",\n    HP: 11,\n    treasure: \"Cleric\",\n    description:\n      \"Kerberos Dirtbeard, Canine Cleric Hailing from the Highlands, this flea-bitten friar never turns down a fetch quest.\",\n    players: 3,\n    image: \"card-images/epic-heroes/cleric-epic(2).svg\"\n  },\n  {\n    id: \"E3\",\n    name: \"Cleric\",\n    subtitle: \"Epic-Hero\",\n    HP: 13,\n    treasure: \"Cleric\",\n    description:\n      'Lord Van Ette A prophet and collector of tithes for the omniscient Celestial, his \"miracles\" are enhanced by the brandewijn distilled by the monks of Nintehn.',\n    players: 2,\n    image: \"card-images/epic-heroes/cleric-epic(3).svg\"\n  },\n  {\n    id: \"E4\",\n    name: \"Cleric\",\n    subtitle: \"Epic-Hero\",\n    HP: 13,\n    treasure: \"Cleric\",\n    description:\n      \"Jejune & Everlea, Holy SistersTenacious and vivacious, each is a threat on her own. But woe betide any who stand against the sisters' united power.\",\n    players: 4,\n    image: \"card-images/epic-heroes/cleric-epic(4).svg\"\n  },\n  {\n    id: \"E5\",\n    name: \"Fighter\",\n    subtitle: \"Epic-Hero\",\n    HP: 11,\n    treasure: \"Fighter\",\n    description:\n      \"Frankov, the Envoy This brave warrior stands alone against the evil that rules the world.\",\n    players: 2,\n    image: \"card-images/epic-heroes/fighter-epic(1).svg\"\n  },\n  {\n    id: \"E6\",\n    name: \"Fighter\",\n    subtitle: \"Epic-Hero\",\n    HP: 11,\n    treasure: \"Fighter\",\n    description:\n      \"Nate the Squidslayer This surly warrior defeated the mighty Squib, Lord of the Rocktopi. Now he seeks to destroy King Croak himself...\",\n    players: 3,\n    image: \"card-images/epic-heroes/fighter-epic(2).svg\"\n  },\n  {\n    id: \"E7\",\n    name: \"Fighter\",\n    subtitle: \"Epic-Hero\",\n    HP: 13,\n    treasure: \"Fighter\",\n    description:\n      \"Antonius, the Rune Knight An elite dragoon, Sir Tony wears armor inscribed with magic runes of ancient and mysterious power.\",\n    players: 2,\n    image: \"card-images/epic-heroes/fighter-epic(3).svg\"\n  },\n  {\n    id: \"E8\",\n    name: \"Fighter\",\n    subtitle: \"Epic-Hero\",\n    HP: 13,\n    treasure: \"Fighter\",\n    description:\n      \"Asmor the Aweless What Asmor lacks in tactical acuity, he more than makes up for in impulsiveness. There's no door he won't kick down, much to the frustration of Arcadia's innkeepers.\",\n    players: 4,\n    image: \"card-images/epic-heroes/fighter-epic(4).svg\"\n  },\n  // {\n  //   id: \"E9\",\n  //   name: \"Mage\",\n  //   subtitle: \"Epic-Hero\",\n  //   HP: 11,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Tempros the Time Marauder He would use his control over time to end all crime. In his hands, this world could be a utopia.\",\n  //   players: 2,\n  //   image: \"card-images/epic-heroes/mage-epic(1).svg\"\n  // },\n  // {\n  //   id: \"E10\",\n  //   name: \"Mage\",\n  //   subtitle: \"Epic-Hero\",\n  //   HP: 11,\n  //   treasure: \"Mage\",\n  //   description:\n  //     'Chia Kang, Mystical Warlock of Yu \"Hey, Listen! I think this Boss Monster is--\" \"Silence, fairy! I will crush him through fire and flames in the name of the Order!\"',\n  //   players: 3,\n  //   image: \"card-images/epic-heroes/mage-epic(2).svg\"\n  // },\n  // {\n  //   id: \"E11\",\n  //   name: \"Mage\",\n  //   subtitle: \"Epic-Hero\",\n  //   HP: 13,\n  //   treasure: \"Mage\",\n  //   description:\n  //     'Terric Warhelm, Half-Elf Archmage \"Weakened by an evil curse, this once-mighty warrior donned the red robes and turned to magic. His spells are chnneled through a magical helmet of untold power.\"',\n  //   players: 2,\n  //   image: \"card-images/epic-heroes/mage-epic(3).svg\"\n  // },\n  // {\n  //   id: \"E12\",\n  //   name: \"Mage\",\n  //   subtitle: \"Epic-Hero\",\n  //   HP: 13,\n  //   treasure: \"Mage\",\n  //   description:\n  //     \"Wayward, the Drifter He is a traveler from a strange land whose only goal is to do whatever is right... whatever that means.\",\n  //   players: 4,\n  //   image: \"card-images/epic-heroes/mage-epic(4).svg\"\n  // },\n  {\n    id: \"E13\",\n    name: \"Thief\",\n    subtitle: \"Epic-Hero\",\n    HP: 11,\n    treasure: \"Thief\",\n    description:\n      \"Hya, Legendary Shinobi Arcadia's deadliest ninja,Hya lives by the proverb that revenge is a dish best served cold.\",\n    players: 2,\n    image: \"card-images/epic-heroes/thief-epic(1).svg\"\n  },\n  {\n    id: \"E14\",\n    name: \"Thief\",\n    subtitle: \"Epic-Hero\",\n    HP: 11,\n    treasure: \"Thief\",\n    description:\n      \"Blackbeard Jake He hid the treasure he won from insult swordfighting in a booty-trap filled cave on the coast of a town called Astoria.\",\n    players: 3,\n    image: \"card-images/epic-heroes/thief-epic(2).svg\"\n  },\n  {\n    id: \"E15\",\n    name: \"Thief\",\n    subtitle: \"Epic-Hero\",\n    HP: 13,\n    treasure: \"Thief\",\n    description:\n      \"Cecil Leoran, Master Factotum The ultimate jack-of-all-trades, Cecil isn't above taking mercenary work to earn gold and glory. But his real goal has never changed: to find a way to return his betrothed Nevra, sealed into a rapier, to her original form.\",\n    players: 2,\n    image: \"card-images/epic-heroes/thief-epic(3).svg\"\n  },\n  {\n    id: \"E14\",\n    name: \"Thief\",\n    subtitle: \"Epic-Hero\",\n    HP: 13,\n    treasure: \"Thief\",\n    description:\n      \"Wallbanger Basketweaver This humble halfing world rather spend his days weaving baskets and eating crumbly cookies. But when adventure calls, he proves a first-rate burglar\",\n    players: 4,\n    image: \"card-images/epic-heroes/thief-epic(4).svg\"\n  },\n];\n","\nimport React from 'react'\nimport '../css/Header.css'\nimport {Link} from 'react-router-dom';\nimport '../css/mediaQueries.css'\n\nfunction Header() {\n    return (\n        <div className='navBar'>\n            <Link className='navTitle' to=\"/\">B<img className='navIcon' src='/favicon.ico' />SS MONSTER</Link>\n            <div className='navList'>\n                <Link className='navItem' to=\"dungeon-masters\">Dungeon Masters</Link>\n                <Link className='navItem' to=\"how-to-play\">How To Play</Link>\n                <Link className='navItem'to=\"credits\">Credits</Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","\nimport React from 'react'\nimport Header from './Header'\n\nfunction BaseLayout({children}) {\n    return (\n        <>\n            <Header />\n            {children}\n        </>\n    )\n}\n\nexport default BaseLayout\n","\nexport const SHUFFLE_ALL_DECKS = \"SHUFFLE_ALL_DECKS\";\nexport const DEAL_HEROES_TO_TOWN = \"DEAL_HEROES_TO_TOWN\";\nexport const DEAL_INITIAL_CARDS = \"DEAL_INITIAL_CARDS\";\nexport const RESET_PLAYER_CARDS = \"RESET_PLAYER_CARDS\";\nexport const NEXT_GAME_PHASE = \"NEXT_GAME_PHASE\";\nexport const PLAYER_KILLED = \"PLAYER_KILLED\";\nexport const RESET_GAME = \"RESET_GAME\";\nexport const DECREASE_PLAYER_HEALTH = \"DECREASE_PLAYER_HEALTH\";\nexport const DEAL_ROOM_CARD = \"DEAL_ROOM_CARD\";\nexport const BAIT_HEROES = \"BAIT_HEROES\";\nexport const UPDATE_PLAYER_TREASURE = \"UPDATE_PLAYER_TREASURE\";\nexport const NEXT_ROUND = \"NEXT_ROUND\";\nexport const ADD_BUILD_ACTIONS = \"ADD_BUILD_ACTIONS\"\n\nexport const BUILDING_MODE = \"BUILDING_MODE\"\nexport const BUILD_DUNGEON = \"BUILD_DUNGEON\";\nexport const DAMAGE_ROOM = \"DAMAGE_ROOM\"\nexport const CHANGE_SHOW_DISCARD_PILE = \"CHANGE_SHOW_DISCARD_PILE\"\nexport const DISCARD_CARD = \"DISCARD_CARD\"\nexport const DRAW_FROM_DISCARD = \"DRAW_FROM_DISCARD\"\n\n// type for currently selected card\nexport const SELECT_CARD = \"SELECT_CARD\";\n\n// hero positioning\nexport const SET_HERO_START_OF_DUNGEON = \"SET_HERO_START_OF_DUNGEON\";\nexport const MOVE_HERO_NUMBER_OF_STEPS = \"MOVE_HERO_NUMBER_OF_STEPS\";\nexport const DAMAGE_HERO = \"DAMAGE_HERO\";\nexport const HERO_KILLED = \"HERO_KILLED\";\nexport const HERO_SURVIVED = \"HERO_SURVIVED\"\n\n// swapping card\nexport const CHANGE_USE_BUTTON_SWAPPING = \"CHANGE_USE_BUTTON_SWAPPING\";\nexport const SWAP_ROOMS = \"SWAP_ROOMS\";\nexport const CHANGE_SWAP_ROOMS_MODE = \"CHANGE_SWAP_ROOMS_MODE\";\n\nexport const ADD_USERNAME = \"ADD_USERNAME\";\nexport const ADD_SOUL = \"ADD_SOUL\";\n\nexport const ABLE_TO_DESTROY = \"ABLE_TO_DESTROY\";\nexport const DESTROY_ROOM = \"DESTROY_ROOM\"\n","\nimport { SHUFFLE_ALL_DECKS, DEAL_HEROES_TO_TOWN, DEAL_INITIAL_CARDS, BUILD_DUNGEON, DEAL_ROOM_CARD, BAIT_HEROES, HERO_KILLED, SET_HERO_START_OF_DUNGEON, RESET_PLAYER_CARDS, HERO_SURVIVED, SWAP_ROOMS, DAMAGE_ROOM, NEXT_ROUND, CHANGE_SHOW_DISCARD_PILE, DRAW_FROM_DISCARD, DESTROY_ROOM, DISCARD_CARD } from \"../actions/types\"\nimport { dungeonBack } from \"../assets/cards\"\n\nconst initialState = {\n    showDiscardPile: false,\n    monsterCardFromDiscard: false,\n    trapCardFromDiscard: false,\n    roomCardFromDiscard: false,\n    bossDeck: [],\n    heroDeck: [],\n    epicHeroDeck: [],\n    roomDeck: [],\n    heroesInTown: [],\n    heroesAtStartOfDungeon: [],\n    playerBoss: {},\n    playerRooms: [\n        // {\n        //     id: \"R59\",\n        //     name: \"The Crushinator\",\n        //     subtitle: \"Advanced Trap Room\",\n        //     dmg: 2,\n        //     treasure: \"Thief\",\n        //     description:\n        //         \"Destroy another room in your dungeon: Until end of turn, your Rooms have +2 damage.\",\n        //     image: \"/card-images/rooms/the-crushinator.svg\",\n        // },\n        // {\n        //     id: \"R58\",\n        //     name: \"Recycling Center\",\n        //     subtitle: \"Advanced Trap Room\",\n        //     dmg: 3,\n        //     treasure: \"Thief\",\n        //     description: \"When another room in your dungeon is destroyed, you may draw two Room cards.\",\n        //     image: \"/card-images/rooms/recycling-center.svg\",\n        // },\n        // {\n        //     id: \"R28\",\n        //     name: \"Beast Menagerie\",\n        //     subtitle: \"Advanced Monster Room\",\n        //     dmg: 4,\n        //     treasure: \"Fighter\",\n        //     description:\n        //         \"Once per turn when you build another Monster room, draw a Room card.\",\n        //     image: \"/card-images/rooms/beast-menagerie.svg\",\n        // },\n        // {\n        //     id: \"R16\",\n        //     name: \"Goblin Armory\",\n        //     subtitle: \"Monster Room\",\n        //     dmg: 1,\n        //     treasure: \"Fighter x2\",\n        //     description: \"Monster Rooms adjacent to this room deal +1 damage.\",\n        //     image: \"/card-images/rooms/goblin-armory.svg\",\n        // },\n        // {\n        //     id: \"R61\",\n        //     name: \"Centipede Tunnel\",\n        //     subtitle: \"Monster Room\",\n        //     dmg: 1,\n        //     treasure: \"Fighter + Mage\",\n        //     description:\n        //     \"When you build this room, you may swap the placement of two Rooms in any one dungeon.\",\n        //     image: \"/card-images/rooms/centipede-tunnel.svg\",\n        // },\n        // {\n        //     id: \"R51\",\n        //     name: \"Dizzygas Hallway\",\n        //     subtitle: \"Trap Room\",\n        //     dmg: 1,\n        //     treasure: \"Thief\",\n        //     description:\n        //     \"If the next room in your dungeon is a Trap room, it has +2 damage.\",\n        //     image: \"/card-images/rooms/dizzygas-hallway.svg\",\n        // },\n        // {\n        //     id: \"R63\",\n        //     name: \"Construction Zone\",\n        //     subtitle: \"Trap Room\",\n        //     dmg: 1,\n        //     treasure: \"Fighter + Thief\",\n        //     description:\n        //     \"When you build this room, you may immediately build an additional Room.\",\n        //     image: \"/card-images/rooms/construction-zone.svg\",\n        // },\n        // {\n        //     id: \"R49\",\n        //     name: \"Boulder Ramp\",\n        //     subtitle: \"Trap Room\",\n        //     dmg: 1,\n        //     treasure: \"Thief\",\n        //     description:\n        //     \"Destroy another room in your dungeon: Deal 5 damage to a hero in this room.\",\n        //     image: \"/card-images/rooms/boulder-ramp.svg\",\n        // },\n        // {\n        //     id: \"R13\",\n        //     name: \"Dracolich Lair\",\n        //     subtitle: \"Advanced Monster Room\",\n        //     dmg: 3,\n        //     treasure: \"Cleric\",\n        //     description:\n        //     \"Once per turn, you may discard two Room cards to choose one Room card from the discard pile and put it into your hand.\",\n        //     image: \"/card-images/rooms/dracolich-lair.svg\",\n        // },\n        // {\n        //     id: \"R1\",\n        //     name: \"Dark Altar\",\n        //     subtitle: \"Trap Room\",\n        //     dmg: 1,\n        //     treasure: \"Cleric x2\",\n        //     description:\n        //     \"Destroy this Room: Choose one card from the discard pile and put it into your hand.\",\n        //     image: \"/card-images/rooms/dark-altar.svg\",\n        // },\n        // {\n        //     id: \"R65\",\n        //     name: \"Dragon Hatchery\",\n        //     subtitle: \"Monster Room\",\n        //     dmg: 0,\n        //     treasure: \"Cleric + Mage + Fighter + Thief\",\n        //     description: \"(This room contains all four treasure types.)\",\n        //     image: \"/card-images/rooms/dragon-hatchery.svg\",\n        // },\n        // {\n        //     id: \"R66\",\n        //     name: \"Dragon Hatchery\",\n        //     subtitle: \"Monster Room\",\n        //     dmg: 0,\n        //     treasure: \"Cleric + Mage + Fighter + Thief\",\n        //     description: \"(This room contains all four treasure types.)\",\n        //     image: \"/card-images/rooms/dragon-hatchery.svg\",\n        // },\n        // {\n        //     id: \"R67\",\n        //     name: \"Dragon Hatchery\",\n        //     subtitle: \"Monster Room\",\n        //     dmg: 0,\n        //     treasure: \"Cleric + Mage + Fighter + Thief\",\n        //     description: \"(This room contains all four treasure types.)\",\n        //     image: \"/card-images/rooms/dragon-hatchery.svg\",\n        // },\n        // {\n        //     id: \"R62\",\n        //     name: \"Centipede Tunnel\",\n        //     subtitle: \"Monster Room\",\n        //     dmg: 1,\n        //     treasure: \"Fighter + Mage\",\n        //     description:\n        //         \"When you build this room, you may swap the placement of two Rooms in any one dungeon.\",\n        //     image: \"/card-images/rooms/centipede-tunnel.svg\",\n        // },\n        // {\n        //     id: \"R50\",\n        //     name: \"Boulder Ramp\",\n        //     subtitle: \"Trap Room\",\n        //     dmg: 1,\n        //     treasure: \"Thief\",\n        //     description:\n        //     \"Destroy another room in your dungeon: Deal 5 damage to a hero in this room.\",\n        //     image: \"/card-images/rooms/boulder-ramp.svg\",\n        // },\n        // {\n        //     id: \"R4\",\n        //     name: \"Open Grave\",\n        //     subtitle: \"Trap Room\",\n        //     dmg: 2,\n        //     treasure: \"Cleric\",\n        //     description:\n        //     \"Once per turn, if a Hero dies in this room, choose one Room card from the discard pile and put into your hand.\",\n        //     image: \"/card-images/rooms/open-grave.svg\",\n        // },\n        // {\n        //     id: \"R22\",\n        //     name: \"Minotaur's Maze\",\n        //     subtitle: \"Monster Room\",\n        //     dmg: 0,\n        //     treasure: \"Fighter\",\n        //     description:\n        //     \"The first time a Hero enters this room, send it back to the previous room.\",\n        //     image: \"/card-images/rooms/minotaurs-maze(1).svg\",\n        // },\n        // {\n        //     id: \"R29\",\n        //     name: \"Monster's Ballroom\",\n        //     subtitle: \"Advanced Monster Room\",\n        //     dmg: \"*\",\n        //     treasure: \"Fighter\",\n        //     description:\n        //         \"This room's damage is equal to the number of Monster rooms in your dungeon.\",\n        //     image: \"/card-images/rooms/monsters-ballroom.svg\",\n        // },\n        // {\n        //     id: \"R70\",\n        //     name: \"Monstrous Monument\",\n        //     subtitle: \"Trap Room\",\n        //     dmg: 1,\n        //     treasure: \"Cleric + Fighter\",\n        //     description:\n        //         \"When you build this room, choose one Monster Room from the discard pile and put it in your hand.\",\n        //     image: \"/card-images/rooms/monstrous-monument.svg\",\n        // },\n        // {\n        //     id: \"R46\",\n        //     name: \"Bottomless Pit\",\n        //     subtitle: \"Trap Room\",\n        //     dmg: 1,\n        //     treasure: \"Thief\",\n        //     description: \"Destroy this room: Kill a Hero in this room.\",\n        //     image: \"/card-images/rooms/bottomless-pit.svg\",\n        // },\n        // {\n        //     id: \"R47\",\n        //     name: \"Bottomless Pit\",\n        //     subtitle: \"Trap Room\",\n        //     dmg: 1,\n        //     treasure: \"Thief\",\n        //     description: \"Destroy this room: Kill a Hero in this room.\",\n        //     image: \"/card-images/rooms/bottomless-pit.svg\",\n        // },\n        // {\n        //     id: \"R48\",\n        //     name: \"Bottomless Pit\",\n        //     subtitle: \"Trap Room\",\n        //     dmg: 1,\n        //     treasure: \"Thief\",\n        //     description: \"Destroy this room: Kill a Hero in this room.\",\n        //     image: \"/card-images/rooms/bottomless-pit.svg\",\n        // },\n    ],\n    playerDungeon: [\n        // [{\n        //     id: \"R29\",\n        //     name: \"Monster's Ballroom\",\n        //     subtitle: \"Advanced Monster Room\",\n        //     dmg: \"*\",\n        //     treasure: \"Fighter\",\n        //     description:\n        //     \"This room's damage is equal to the number of Monster rooms in your dungeon.\",\n        //     image: \"/card-images/rooms/monsters-ballroom.svg\",\n        // }],\n        // [{\n        //     id: \"R58\",\n        //     name: \"Recycling Center\",\n        //     subtitle: \"Advanced Trap Room\",\n        //     dmg: 3,\n        //     treasure: \"Thief\",\n        //     description: \"When another room in your dungeon is destroyed, you may draw two Room cards.\",\n        //     image: \"/card-images/rooms/recycling-center.svg\",\n        // }],\n        // [{\n        //     id: \"R59\",\n        //     name: \"The Crushinator\",\n        //     subtitle: \"Advanced Trap Room\",\n        //     dmg: 2,\n        //     treasure: \"Thief\",\n        //     description:\n        //       \"Destroy another room in your dungeon: Until end of turn, your Rooms have +2 damage. Revised: Once per turn, you may destroy another Room in your dungeon to give all your Rooms +2 until end of turn.\",\n        //     image: \"/card-images/rooms/the-crushinator.svg\",\n        //   },],\n        // [\n        //     {\n        //         id: \"R14\",\n        //         name: \"Vampire Bordello\",\n        //         subtitle: \"Advanced Monster Room\",\n        //         dmg: 3,\n        //         treasure: \"Cleric\",\n        //         description:\n        //             \"Once per turn, if a Hero dies in this room you may heal one wound. (Flip over one of your wounds, adding its Soul value to your total.)\",\n        //         image: \"/card-images/rooms/vampire-bordello.svg\",\n        //     },\n        // ],\n        // [{\n        //     id: \"R28\",\n        //     name: \"Beast Menagerie\",\n        //     subtitle: \"Advanced Monster Room\",\n        //     dmg: 4,\n        //     treasure: \"Fighter\",\n        //     description:\n        //         \"Once per turn when you build another Monster room, draw a Room card.\",\n        //     image: \"/card-images/rooms/beast-menagerie.svg\",\n        // }],\n\n        [dungeonBack], [dungeonBack],\n        [dungeonBack], [dungeonBack],\n        [dungeonBack], [dungeonBack]\n    ],\n    discardPile: [\n        // {\n        //     id: \"R12\",\n        //     name: \"Dracolich Lair\",\n        //     subtitle: \"Advanced Monster Room\",\n        //     dmg: 3,\n        //     treasure: \"Cleric\",\n        //     description:\n        //     \"Once per turn, you may discard two Room cards to choose one Room card from the discard pile and put it into your hand.\",\n        //     image: \"/card-images/rooms/dracolich-lair.svg\",\n        // },\n        // {\n        //     id: \"R24\",\n        //     name: \"Neanderthal Cave\",\n        //     subtitle: \"Monster Room\",\n        //     dmg: 3,\n        //     treasure: \"Fighter\",\n        //     description: \"You cannot build an Advanced Room on Neanderthal Cave.\",\n        //     image: \"/card-images/rooms/neanderthal-cave.svg\",\n        // },\n        // {\n        //     id: \"R20\",\n        //     name: \"Golem Factory\",\n        //     subtitle: \"Monster Room\",\n        //     dmg: 2,\n        //     treasure: \"Fighter\",\n        //     description:\n        //         \"Once per turn, if a hero dies in this room, draw a Room card.\",\n        //     image: \"/card-images/rooms/golem-factory.svg\",\n        // },\n        // {\n        //     id: \"R16\",\n        //     name: \"Goblin Armory\",\n        //     subtitle: \"Monster Room\",\n        //     dmg: 1,\n        //     treasure: \"Fighter x2\",\n        //     description: \"Monster Rooms adjacent to this room deal +1 damage.\",\n        //     image: \"/card-images/rooms/goblin-armory.svg\",\n        // },\n    ]\n}\n\nconst cardDecks = (state = initialState, action) => {\n\n    switch (action.type) {\n        case SHUFFLE_ALL_DECKS:\n            // console.log('shuffling deck')\n            return {\n                ...state,\n                bossDeck: [...action.data.bossDeck],\n                heroDeck: [...action.data.heroDeck],\n                epicHeroDeck: [...action.data.epicHeroDeck],\n                roomDeck: [...action.data.roomDeck],\n            }\n        case DEAL_HEROES_TO_TOWN:\n            if (action.data.heroType === \"ordinary\") {\n                // console.log('dealing heroes to town', action.data.number)\n                let chosenHeroes = state.heroDeck.slice(-action.data.number);\n                let newHeroDeck = state.heroDeck.slice(0, - (action.data.number));\n                // console.log('chosenHeroes', chosenHeroes)\n                // console.log('newHeroDeck', newHeroDeck)\n                return {\n                    ...state,\n                    heroesInTown: [...chosenHeroes],\n                    heroDeck: state.heroDeck.slice(0, - (action.data.number))\n                }\n            }\n            else {\n                // console.log('dealing heroes to town', action.data.number)\n                let chosenHeroes = state.epicHeroDeck.slice(-action.data.number);\n                let newHeroDeck = state.epicHeroDeck.slice(0, - (action.data.number));\n                // console.log('chosenHeroes', chosenHeroes)\n                // console.log('newHeroDeck', newHeroDeck)\n                return {\n                    ...state,\n                    heroesInTown: [...chosenHeroes],\n                    epicHeroDeck: state.epicHeroDeck.slice(0, - (action.data.number))\n                }\n            }\n\n        case DEAL_INITIAL_CARDS:\n            return {\n                ...state,\n                bossDeck: state.bossDeck.slice(0, -1),\n                roomDeck: state.roomDeck.slice(0, -5),\n                playerBoss: action.data.chosenBoss,\n                playerRooms: [...action.data.chosenRooms]\n            }\n        case RESET_PLAYER_CARDS:\n            return {\n                ...state,\n                playerRooms: [],\n                playerDungeon: [[dungeonBack], [dungeonBack], [dungeonBack], [dungeonBack], [dungeonBack], [dungeonBack]],\n                heroesInTown: [],\n                heroesAtStartOfDungeon: []\n            }\n        case BUILD_DUNGEON:\n            action.card.durability = 100\n            // adds new room to dungeon if blank spot is clicked\n            if (action.targetID === \"D1\") {\n\n                let newPlayerDungeon = []\n\n                // custom filter function to filter out cards with id of \"D1\"\n                for (let i = 0; i < state.playerDungeon.length; i++) {\n                    if (state.playerDungeon[i][0].id !== \"D1\") {\n                        newPlayerDungeon.push(state.playerDungeon[i])\n                    }\n                }\n\n                newPlayerDungeon.push([action.card])\n\n                for (let i = newPlayerDungeon.length; i < 6; i++) {\n                    newPlayerDungeon.push([dungeonBack])\n                }\n\n                return {\n                    ...state,\n                    playerDungeon: newPlayerDungeon,\n                    playerRooms: state.playerRooms.filter(cardObj => cardObj.id !== action.card.id)\n                }\n            }\n            // adds new room on top of current room in dungeon\n            else {\n\n                let newPlayerDungeon = state.playerDungeon.map(roomArr => { //[[{}], [{}], [{}]]\n\n                    if (roomArr[0].id === action.targetID) {\n                        // using tempArr so current roomArr in state.playerDungeon is not mutated\n                        let tempArr = [...roomArr]\n                        tempArr.unshift(action.card)\n                        return tempArr\n                    }\n                    else {\n                        return roomArr\n                    }\n                })\n                return {\n                    ...state,\n                    playerDungeon: newPlayerDungeon,\n                    playerRooms: state.playerRooms.filter(cardObj => cardObj.id !== action.card.id)\n                }\n            }\n        case DAMAGE_ROOM:\n            return {\n                ...state,\n                playerDungeon: state.playerDungeon.map(roomArr => {\n                    if(action.roomID === roomArr[0].id){\n                        roomArr[0].durability -= 20\n                    }\n                    return roomArr\n                })\n            }\n        case DESTROY_ROOM:\n            // console.log('destroying room', action.roomIndex)\n\n            let destroyedDungeon = [...state.playerDungeon]\n            let newDiscardPile = []\n            // if the array only has one room then destroy the whole array and add a blank room on the end\n            // console.log(roomIndex)\n            if (state.playerDungeon[action.roomIndex].length === 1) {\n                let destroyedRoomArr = destroyedDungeon.splice(action.roomIndex, 1)[0]\n                newDiscardPile.push(destroyedRoomArr[0])\n                destroyedDungeon.push([dungeonBack])\n            }\n            // if the array has multiple rooms then remove the top room\n            else {\n                let destroyedRoomArr = destroyedDungeon[action.roomIndex].splice(0, 1)\n                newDiscardPile.push(destroyedRoomArr[0])\n            }\n            // console.log(destroyedDungeon)\n            return {\n                ...state,\n                playerDungeon: destroyedDungeon,\n                discardPile: [...state.discardPile].concat(newDiscardPile) \n            }\n        case DEAL_ROOM_CARD:\n            return {\n                ...state,\n                roomDeck: state.roomDeck.slice(0, -1),\n                playerRooms: state.playerRooms.concat(state.roomDeck.slice(-1))\n            }\n        case SWAP_ROOMS:\n            let selectedCardIndex = null;\n            let targetRoomIndex = null;\n            let newDungeon = [...state.playerDungeon]\n            for (let index = 0; index < state.playerDungeon.length; index++) {\n                if (state.playerDungeon[index][0].id === action.targetedRoomID) {\n                    // console.log('target index found', index)\n                    targetRoomIndex = index\n                }\n                if (state.playerDungeon[index][0].id === action.selectedCardID) {\n                    // console.log('selected index found', index)\n                    selectedCardIndex = index\n                }\n            }\n            // console.log(targetRoomIndex, selectedCardIndex)\n\n            [newDungeon[targetRoomIndex], newDungeon[selectedCardIndex]] = [newDungeon[selectedCardIndex], newDungeon[targetRoomIndex]]\n            // console.log(newDungeon)\n\n            return {\n                ...state,\n                playerDungeon: [...newDungeon]\n            }\n        case BAIT_HEROES:\n            // console.log(\"boss treasure\", state.playerBoss.treasure)\n            let bossTreasure = state.playerBoss.treasure;\n            let thiefTreasure = action.data.treasureThief;\n            let clericTreasure = action.data.treasureCleric;\n            let fighterTreasure = action.data.treasureFighter;\n            // console.log(\"thiefTreasure\", thiefTreasure, \"clericTreasure\", clericTreasure, \"fighterTreasure\", fighterTreasure)\n            // adding the boss treasure to the treasure type depending on the boss\n            switch (bossTreasure) {\n                case \"Thief\":\n                    thiefTreasure++\n                    break\n                case \"Cleric\":\n                    clericTreasure++\n                    break\n                case \"Fighter\":\n                    fighterTreasure++\n                    break\n                default:\n                    break;\n            }\n            // console.log(\"thiefTreasure\", thiefTreasure, \"clericTreasure\", clericTreasure, \"fighterTreasure\", fighterTreasure)\n            // accidentally did baiting based off hero treasures instead of room treasures (not removing bc could potentially reference in future)\n            let heroesToPlayerDungeon = state.heroesInTown.filter(hero => {\n                // console.log(hero)\n                // console.log(action.data)\n\n                // if the hero is the fool he always goes to the dungeon\n                if (hero.treasure === \"?\") {\n                    return true\n                }\n                // if the hero is ordinary\n                if (hero.subtitle === \"Ordinary-Hero\") {\n                    // console.log('ordinary hero')\n                    if (hero.treasure === \"Thief\" && thiefTreasure > 1) {\n                        return true\n                    }\n                    if (hero.treasure === \"Cleric\" && clericTreasure > 1) {\n                        return true\n                    }\n                    if (hero.treasure === \"Fighter\" && fighterTreasure > 1) {\n                        return true\n                    }\n                }\n                // if the hero is epic\n                else {\n                    if (hero.treasure === \"Thief\" && thiefTreasure > 2) {\n                        return true\n                    }\n                    if (hero.treasure === \"Cleric\" && clericTreasure > 2) {\n                        return true\n                    }\n                    if (hero.treasure === \"Fighter\" && fighterTreasure > 2) {\n                        return true\n                    }\n                }\n                // if no case matches then the hero stays in town\n                return false\n            })\n            // console.log(heroesToPlayerDungeon)\n            return {\n                ...state,\n                heroesInTown: state.heroesInTown.filter(hero => !heroesToPlayerDungeon.includes(hero)),\n                heroesAtStartOfDungeon: [...heroesToPlayerDungeon]\n            }\n        case HERO_KILLED:\n            return {\n                ...state,\n                heroesAtStartOfDungeon: state.heroesAtStartOfDungeon.slice(1),\n            }\n        case HERO_SURVIVED:\n            return {\n                ...state,\n                heroesAtStartOfDungeon: state.heroesAtStartOfDungeon.slice(1),\n            }\n        case SET_HERO_START_OF_DUNGEON:\n            return {\n                ...state,\n                heroesInTown: [],\n            }\n        case NEXT_ROUND: // to remove cards that have 0 durability & add 1 card to player hand for ever 2 rooms destroyed\n\n            let newPlayerDungeon = []\n            let numRoomsDestroyed = 0\n            let newDiscardPile2 = []\n\n            state.playerDungeon.forEach(roomArr => {\n                let tempArr = [...roomArr]\n                if (tempArr[0].durability === 0) {\n                    if (tempArr.length > 1) {\n                        newDiscardPile2.push(tempArr.splice(0, 1)[0])\n                        newPlayerDungeon.push(tempArr)\n                        numRoomsDestroyed += 1\n                    }\n                    else {\n                        newDiscardPile2.push(tempArr[0])\n                        numRoomsDestroyed += 1\n                    }\n                }\n                else {\n                    newPlayerDungeon.push(tempArr)\n                }\n            })\n\n            for (let i = newPlayerDungeon.length; i < 6; i++) {\n                newPlayerDungeon.push([dungeonBack])\n            }\n\n            let cardsToDraw = []\n            let newRoomDeck = state.roomDeck\n\n            if (numRoomsDestroyed === 6) {\n                cardsToDraw.push(newRoomDeck.splice(-3)) // three cards are added\n            }\n            else if (numRoomsDestroyed >= 4) {\n                cardsToDraw.push(newRoomDeck.splice(-2)) // two cards are added\n            }\n            else if (numRoomsDestroyed >= 2) {\n                cardsToDraw.push(newRoomDeck.splice(-1)) // one card is added\n            }\n\n            // console.log(\"newDiscardPile2\", newDiscardPile2)\n            // console.log(\"cardsToDraw\", cardsToDraw)\n\n            // console.log(newPlayerDungeon)\n\n            if (numRoomsDestroyed >= 2) { // some amount of cards are drawn and added to players hand\n                return {\n                    ...state,\n                    playerDungeon: newPlayerDungeon,\n                    roomDeck: newRoomDeck,\n                    playerRooms: state.playerRooms.concat(cardsToDraw[0]),\n                    discardPile: [...state.discardPile].concat(newDiscardPile2) \n                }\n            }\n            else { // no cards added to players hand\n                return {\n                    ...state,\n                    playerDungeon: newPlayerDungeon,\n                    discardPile: [...state.discardPile].concat(newDiscardPile2) \n                }\n            }\n        case CHANGE_SHOW_DISCARD_PILE:\n            // console.log(\"action.roomTypeToDraw\", action.roomTypeToDraw)\n            if (action.roomTypeToDraw === \"Monster Room\") {\n                return {\n                    ...state,\n                    showDiscardPile: !state.showDiscardPile,\n                    monsterCardFromDiscard: !state.monsterCardFromDiscard,\n                }\n            }\n            else if (action.roomTypeToDraw === \"Trap Room\") {\n                return {\n                    ...state,\n                    showDiscardPile: !state.showDiscardPile,\n                    trapCardFromDiscard: !state.trapCardFromDiscard,\n                }\n            }\n            else {\n                return {\n                    ...state,\n                    showDiscardPile: !state.showDiscardPile,\n                    roomCardFromDiscard: !state.roomCardFromDiscard,\n                }\n            }\n        case DISCARD_CARD:\n            \n            let cardDiscarded = state.playerRooms.filter(cardObj => cardObj.id === action.roomID)\n            // console.log(\"cardDiscarded\", cardDiscarded)\n\n            return {\n                ...state,\n                playerRooms: state.playerRooms.filter(cardObj => cardObj.id !== action.roomID),\n                discardPile: state.discardPile.concat(cardDiscarded),\n            }\n\n        case DRAW_FROM_DISCARD:\n\n            let cardDrawn = state.discardPile.filter(cardObj => cardObj.id === action.roomID)\n\n            return {\n                ...state,\n                playerRooms: state.playerRooms.concat(cardDrawn),\n                discardPile: state.discardPile.filter(cardObj => cardObj.id !== action.roomID)\n            }\n        default:\n            return state\n    }\n}\n\nexport default cardDecks","\nimport { NEXT_GAME_PHASE, NEXT_ROUND, PLAYER_KILLED, RESET_GAME } from \"../actions/types\"\n\nconst initialState = {\n    gamePhase: 1,\n    gameRound: 1,\n}\n\nconst gamePhase = (state = initialState, action) => {\n\n    switch(action.type){\n        case NEXT_GAME_PHASE:\n            return {\n                ...state,\n                gamePhase: state.gamePhase+1\n            }\n        case NEXT_ROUND:\n            // console.log('changing round')\n            return {\n                ...state,\n                gamePhase: 2,\n                gameRound: state.gameRound + 1,\n            }\n        case PLAYER_KILLED:\n            return {\n                ...state,\n                gamePhase: 10,\n            }\n        case RESET_GAME:\n            return {\n                ...state,\n                gamePhase: 1,\n                gameRound: 1,\n            }\n        default:\n            return state\n    }\n}\n\nexport default gamePhase","\nimport { DECREASE_PLAYER_HEALTH, UPDATE_PLAYER_TREASURE, RESET_GAME, HERO_KILLED, ADD_BUILD_ACTIONS, CHANGE_USE_BUTTON_SWAPPING, CHANGE_SWAP_ROOMS_MODE, NEXT_ROUND, ADD_USERNAME, ADD_SOUL, ABLE_TO_DESTROY } from \"../actions/types\"\n\nconst initialState = {\n    username: \"username\",\n    health: 5,\n    souls: 0,\n    treasureCleric: 0,\n    treasureFighter: 0,\n    treasureThief: 0,\n    buildActions: 1,\n    useButtonSwapping: false,\n    swapRoomsMode: false,\n    destroyMode: false,\n}\n\nconst playerStats = (state = initialState, action) => {\n\n    switch(action.type){\n        case ADD_USERNAME:\n            return {\n                ...state,\n                username: action.username\n            }\n        case ABLE_TO_DESTROY:\n            return {\n                ...state,\n                destroyMode: !state.destroyMode\n            }\n        case DECREASE_PLAYER_HEALTH:\n            return {\n                ...state,\n                health: state.health - action.points,\n            }\n        case RESET_GAME:\n            return {\n                ...state,\n                health: 5,\n                souls: 0,\n            }\n        case HERO_KILLED:\n            return {\n                ...state,\n                souls: state.souls + 1,\n            }\n        case CHANGE_USE_BUTTON_SWAPPING:\n            return {\n                ...state,\n                useButtonSwapping: !state.useButtonSwapping\n            }\n        case CHANGE_SWAP_ROOMS_MODE:\n            return {\n                ...state,\n                swapRoomsMode: !state.swapRoomsMode\n            }\n        case UPDATE_PLAYER_TREASURE:\n            let thiefTreasure = 0;\n            let clericTreasure = 0;\n            let fighterTreasure = 0;\n            action.data.forEach(room => {\n                if(room[0]){\n                    let treasureTypesArr = room[0].treasure.split(\" + \");\n                    treasureTypesArr.forEach(treasureString => {\n                        if(treasureString === \"Thief\"){\n                            thiefTreasure++\n                        }\n                        if(treasureString === \"Thief x2\"){\n                            thiefTreasure = thiefTreasure + 2;\n                        }\n                        if(treasureString === \"Cleric\"){\n                            clericTreasure++\n                        }\n                        if(treasureString === \"Cleric x2\"){\n                            clericTreasure = clericTreasure + 2;\n                        }\n                        if(treasureString === \"Fighter\"){\n                            fighterTreasure++\n                        }\n                        if(treasureString === \"Fighter x2\"){\n                            fighterTreasure = fighterTreasure + 2;\n                        }\n                    })\n                }\n            });\n            return {\n                ...state,\n                treasureCleric: clericTreasure,\n                treasureFighter: fighterTreasure,\n                treasureThief: thiefTreasure\n            }\n        case ADD_BUILD_ACTIONS:\n            return {\n                ...state,\n                buildActions: state.buildActions + action.numberOfActions\n            }\n        case NEXT_ROUND: // to add 1 build actions for ever 2 rooms destroyed\n\n            let numRoomsDestroyed = 0\n            let addedBuildActions = 0\n\n            // playerDungeon brought in on the action\n            action.playerDungeon.forEach(roomArr => {\n                if(roomArr[0].durability === 0){\n                    numRoomsDestroyed += 1\n                }\n            })\n\n            if(numRoomsDestroyed === 6){\n                addedBuildActions += 3 // three build actions are added\n            }\n            else if(numRoomsDestroyed >= 4){\n                addedBuildActions += 2 // two build actions are added\n            }\n            else if(numRoomsDestroyed >= 2){\n                addedBuildActions += 1 // one build action is added\n            }\n\n            if(numRoomsDestroyed >= 2){ // some amount of build actions added\n                return {\n                    ...state,\n                    buildActions: state.buildActions += addedBuildActions\n                }\n            }\n            else { // no build actions added\n                return {\n                    ...state\n                }\n            }\n        case ADD_SOUL:\n            return {\n                ...state,\n                souls: state.souls + 1\n            }\n        default:\n            return state\n    }\n}\n\n\nexport default playerStats","\n\n\nimport { SELECT_CARD, BUILDING_MODE } from \"../actions/types\"\n\nconst initialState = {\n    card: {},\n    className: \"\",\n    buildingMode: false\n}\n\nconst misc = (state = initialState, action) => {\n\n    switch(action.type){\n        case SELECT_CARD:\n            if(action.id !== \"A1\" && action.id !== \"D1\"){\n                return {\n                    ...state,\n                    card: action.card,\n                    className: action.className,\n                    id: action.id\n                }\n            }\n            else{\n                return{\n                    ...state\n                }\n            }\n            \n        case BUILDING_MODE:\n            // console.log(\"buildingMode\", !state.buildingMode)\n            return {\n                ...state,\n                buildingMode: !state.buildingMode // swaps state of buildingMode between true and false\n            }\n        default:\n            return state\n    }\n}\n\nexport default misc","\nimport { SET_HERO_START_OF_DUNGEON, MOVE_HERO_NUMBER_OF_STEPS, DAMAGE_HERO, HERO_KILLED, HERO_SURVIVED, DESTROY_ROOM } from \"../actions/types\"\nimport { dungeonBack } from \"../assets/cards\"\n\nconst initialState = {\n    heroRoomPosition: 5,\n    heroHealth: 1\n}\n\nconst heroStats = (state = initialState, action) => {\n\n    switch (action.type) {\n        case SET_HERO_START_OF_DUNGEON:\n            // console.log('setting hero to start of dungeon', action.playerDungeon)\n            let roomsInPlayerDungeon = [];\n            for (let index = 0; index < action.playerDungeon.length; index++) {\n                // console.log(action.playerDungeon[index])\n                if (action.playerDungeon[index][0] === dungeonBack) {\n                    // console.log('empty card')\n                }\n                else {\n                    roomsInPlayerDungeon.push([action.playerDungeon[index]])\n                }\n            }\n            // console.log(\"rooms in player dungeon\", roomsInPlayerDungeon)\n            return {\n                ...state,\n                heroRoomPosition: roomsInPlayerDungeon.length - 1,\n                heroHealth: action.heroesAtStartOfDungeon[0].HP\n            }\n        case MOVE_HERO_NUMBER_OF_STEPS:\n            return {\n                ...state,\n                heroRoomPosition: state.heroRoomPosition + action.steps,\n            }\n        case DESTROY_ROOM:\n            let newHeroPosition = null;\n            if (action.roomIndex <= state.heroRoomPosition && action.roomClassName === \"room\") {\n                newHeroPosition = state.heroRoomPosition - 1\n            }\n            else{\n                newHeroPosition = state.heroRoomPosition\n            }\n            // console.log('newHeroPosition', newHeroPosition)\n            return {\n                ...state,\n                heroRoomPosition: newHeroPosition\n            }\n        case DAMAGE_HERO:\n            return {\n                ...state,\n                heroHealth: state.heroHealth - action.damage,\n            }\n        case HERO_KILLED:\n            // console.log(\"action.heroesAtStartOfDungeon\", action.heroesAtStartOfDungeon)\n\n            if (action.lastHero) {\n                // console.log(\"HERO_KILLED last hero\")\n                return {\n                    ...state,\n                    heroRoomPosition: 5,\n                }\n            }\n            else {\n                // replicating everything that SET_HERO_START_OF_DUNGEON is doing\n                // console.log(\"HERO_KILLED not the last hero\")\n                // console.log('setting hero to start of dungeon', action.playerDungeon)\n                let roomsInPlayerDungeon = [];\n                for (let index = 0; index < action.playerDungeon.length; index++) {\n                    // console.log(action.playerDungeon[index])\n                    if (action.playerDungeon[index][0] === dungeonBack) {\n                        // console.log('empty card')\n                    }\n                    else {\n                        roomsInPlayerDungeon.push([action.playerDungeon[index]])\n                    }\n                }\n                // console.log(\"rooms in player dungeon\", roomsInPlayerDungeon)\n                return {\n                    ...state,\n                    heroRoomPosition: 5,\n                    heroRoomPosition: roomsInPlayerDungeon.length - 1,\n                    heroHealth: action.heroesAtStartOfDungeon[1].HP\n                }\n            }\n        case HERO_SURVIVED:\n            // console.log(\"action.heroesAtStartOfDungeon\", action.heroesAtStartOfDungeon)\n\n            if (action.lastHero) {\n                // console.log(\"HERO_SURVIVED last hero\")\n                return {\n                    ...state,\n                    heroRoomPosition: 5,\n                }\n            }\n            else {\n                // replicating everything that SET_HERO_START_OF_DUNGEON is doing\n                // console.log(\"HERO_SURVIVED not the last hero\")\n                // console.log('setting hero to start of dungeon', action.playerDungeon)\n                let roomsInPlayerDungeon = [];\n                for (let index = 0; index < action.playerDungeon.length; index++) {\n                    // console.log(action.playerDungeon[index])\n                    if (action.playerDungeon[index][0] === dungeonBack) {\n                        // console.log('empty card')\n                    }\n                    else {\n                        roomsInPlayerDungeon.push([action.playerDungeon[index]])\n                    }\n                }\n                // console.log(\"rooms in player dungeon\", roomsInPlayerDungeon)\n                return {\n                    ...state,\n                    heroRoomPosition: 5,\n                    heroRoomPosition: roomsInPlayerDungeon.length - 1,\n                    heroHealth: action.heroesAtStartOfDungeon[1].HP\n                }\n            }\n\n\n        default:\n            return state\n    }\n}\n\n\nexport default heroStats","\nimport { combineReducers } from \"redux\"\nimport cardDecks from \"./cardDecks\"\nimport gamePhase from \"./gamePhase\"\nimport playerStats from \"./playerStats\"\nimport misc from \"./misc\"\nimport heroStats from \"./heroStats\"\n\n// EX: access sampleReducer count by using \"state.sampleCR.count\"\nconst rootReducer = combineReducers({\n    cardDecks,\n    gamePhase,\n    playerStats,\n    misc,\n    heroStats\n    // add additional reducer key-value pairs\n})\n\nexport default rootReducer","\nimport { SHUFFLE_ALL_DECKS, DEAL_HEROES_TO_TOWN, DEAL_INITIAL_CARDS, NEXT_GAME_PHASE, DECREASE_PLAYER_HEALTH, DEAL_ROOM_CARD, BAIT_HEROES, UPDATE_PLAYER_TREASURE, BUILD_DUNGEON, NEXT_ROUND, SET_HERO_START_OF_DUNGEON, MOVE_HERO_NUMBER_OF_STEPS, DAMAGE_HERO, HERO_KILLED, PLAYER_KILLED, RESET_PLAYER_CARDS, RESET_GAME, ADD_BUILD_ACTIONS, HERO_SURVIVED, CHANGE_USE_BUTTON_SWAPPING, SWAP_ROOMS, CHANGE_SWAP_ROOMS_MODE, DAMAGE_ROOM, DRAW_FROM_DISCARD, CHANGE_SHOW_DISCARD_PILE, ADD_USERNAME, ADD_SOUL, ABLE_TO_DESTROY, DESTROY_ROOM, DISCARD_CARD } from \"./types\"\n\n// !add multiple actions to this file\n\nexport const shuffleAllDecksAction = (allDecksObj) => {\n    return {\n        type: SHUFFLE_ALL_DECKS,\n        data: allDecksObj\n    }\n}\nexport const dealHeroesToTown = (heroType, number) => {\n    return {\n        type: DEAL_HEROES_TO_TOWN,\n        data: { heroType, number }\n    }\n}\nexport const dealRoomCard = () => {\n    return {\n        type: DEAL_ROOM_CARD,\n    }\n}\nexport const resetPlayerCards = () => {\n    return {\n        type: RESET_PLAYER_CARDS,\n    }\n}\nexport const baitHeroes = (treasureCleric, treasureFighter, treasureThief) => {\n    return {\n        type: BAIT_HEROES,\n        data: {treasureCleric, treasureFighter, treasureThief}\n    }\n}\nexport const dealInitialCardsAction = (chosenBoss, chosenRooms) => {\n    return {\n        type: DEAL_INITIAL_CARDS,\n        data: { chosenBoss, chosenRooms }\n    }\n}\nexport const nextGamePhase = () => {\n    return {\n        type: NEXT_GAME_PHASE,\n    }\n}\nexport const resetGame = () => {\n    return {\n        type: RESET_GAME,\n    }\n}\nexport const nextRound = (playerDungeon) => {\n    return {\n        type: NEXT_ROUND,\n        playerDungeon\n    } \n}\nexport const updatePlayerTreasure = (playerDungeon) => {\n    return {\n        type: UPDATE_PLAYER_TREASURE,\n        data: playerDungeon\n    }\n}\nexport const decreasePlayerHealth = (points) => {\n    return {\n        type: DECREASE_PLAYER_HEALTH,\n        points\n    }\n}\nexport const buildDungeon = (cardObj, targetID) => {\n\n    return {\n        type: BUILD_DUNGEON, \n        card: cardObj,\n        targetID: targetID\n    }\n}\nexport const setHeroStartOfDungeon = (playerDungeon, heroesAtStartOfDungeon) => {\n    return {\n        type: SET_HERO_START_OF_DUNGEON, \n        playerDungeon,\n        heroesAtStartOfDungeon\n    }\n}\nexport const moveHeroNumberOfSteps = (steps) => {\n    return {\n        type: MOVE_HERO_NUMBER_OF_STEPS,\n        steps\n    }\n}\nexport const damageHero = (damage) => {\n    return {\n        type: DAMAGE_HERO,\n        damage\n    }\n}\nexport const heroKilled = (lastHero, playerDungeon, heroesAtStartOfDungeon) => {\n    return {\n        type: HERO_KILLED,\n        lastHero,\n        playerDungeon,\n        heroesAtStartOfDungeon\n    }\n}\nexport const heroSurvived = (lastHero, playerDungeon, heroesAtStartOfDungeon) => {\n    return {\n        type: HERO_SURVIVED,\n        lastHero,\n        playerDungeon,\n        heroesAtStartOfDungeon\n    }\n} \nexport const playerKilled = () => {\n    return {\n        type: PLAYER_KILLED,\n    }\n}\nexport const addBuildActions = (numberOfActions) => {\n    return {\n        type: ADD_BUILD_ACTIONS,\n        numberOfActions\n    }\n}\nexport const changeUseButtonSwapping = () => {\n    return {\n        type: CHANGE_USE_BUTTON_SWAPPING\n    }\n}\nexport const changeSwapRoomsMode = () => {\n    return {\n        type: CHANGE_SWAP_ROOMS_MODE\n    }\n}\nexport const swapRooms = (selectedCardID, targetedRoomID) => {\n    return {\n        type: SWAP_ROOMS,\n        selectedCardID,\n        targetedRoomID\n    }\n}\nexport const damageRoom = (roomID) => {\n    return {\n        type: DAMAGE_ROOM,\n        roomID\n    }\n}\nexport const changeShowDiscardPile = (roomTypeToDraw) => {\n    return {\n        type: CHANGE_SHOW_DISCARD_PILE,\n        roomTypeToDraw\n    }\n}\nexport const discardCard = (roomID) => {\n    return {\n        type: DISCARD_CARD,\n        roomID\n    }\n}\nexport const drawFromDiscard = (roomID) => {\n    return {\n        type: DRAW_FROM_DISCARD,\n        roomID\n    }\n}\nexport const addUsername = (username) => {\n    return {\n        type: ADD_USERNAME,\n        username\n    }\n}\nexport const addSoul = () => {\n    return {\n        type: ADD_SOUL\n    }\n}\nexport const ableToDestroy = () => {\n    return {\n        type: ABLE_TO_DESTROY\n    }\n}\nexport const destroyRoom = (roomIndex, roomClassName) => {\n    return {\n        type: DESTROY_ROOM,\n        roomIndex,\n        roomClassName\n    }\n}\n\n","import React, { useState, useEffect } from 'react';\nimport '../src/components/css/front.css';\nimport { addUsername } from './actions/sampleActions';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\n\nfunction App() {\n\n  const [username, setUsername] = useState(\"\")\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    localStorage.setItem('username', JSON.stringify(username));\n  }, [username])\n  let navigate = useNavigate();\n\n  // event listener on enter key to submit username and nagivate to game page\n  const listener = (e) => {\n    if (e.key === \"Enter\"){\n      handleFormSubmit()\n    }\n  }\n  window.addEventListener(\"keydown\", listener)\n\n  const handleFormSubmit = () => {\n    // console.log('running handleFormSubmit');\n    // console.log(username);\n    dispatch(addUsername(username))\n    navigate(\"/progress\")\n  }\n\n  return (\n    <>\n      <div className=\"homeBody\">\n        <div className=\"homeBanner\">\n          <img className=\"dmBackground\" src='/homeBannerNoWords.png' alt=\"\" />\n          <img className='homeLogo' src=\"/logo.png\" alt=\"\" />\n          <form className='startButtonContainer'>\n            <input className=\"inputUsername\" placeholder=\"Enter Username\" type=\"text\" required value={username} onChange={(e) => setUsername(e.target.value)} name=\"username\" />\n            <div className='homeButton' type=\"submit\" value=\"Submit\" onClick={handleFormSubmit} >Start Game</div>\n          </form>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default App\n","\nimport { SELECT_CARD, BUILDING_MODE } from \"./types\"\n\nexport const selectCard = (cardObj, className, id) => {\n    \n    return {\n        type: SELECT_CARD,\n        card: cardObj,\n        className: className,\n        id: id\n    }\n}\nexport const buildingMode = () => {\n    return {\n        type: BUILDING_MODE\n    }\n}\n\n\n","\nconst { bossDeck, roomDeck, heroDeck, epicHeroDeck, spellDeck} = require('../../assets/cards');\n\nfunction shuffleDeck(givenDeck) {\n    for (let x = 0; x < givenDeck.length; x++) {\n        let randomCardNum = Math.floor(Math.random() * (givenDeck.length-1));\n        let givenX = givenDeck[x];\n        givenDeck[x] = givenDeck[randomCardNum];\n        givenDeck[randomCardNum] = givenX\n    }\n    return givenDeck\n}\n\nexport const shuffleAllDecks = () => {\n    // console.log('Shuffling Decks')\n    let shuffledBosses = shuffleDeck(bossDeck);\n    let shuffledRooms = shuffleDeck(roomDeck);\n    let shuffledHeroes = shuffleDeck(heroDeck);\n    let shuffledEpicHeroes = shuffleDeck(epicHeroDeck);\n    let shuffledSpells = shuffleDeck(spellDeck);\n\n    let deckObj = { bossDeck: shuffledBosses, roomDeck: shuffledRooms, heroDeck: shuffledHeroes, epicHeroDeck: shuffledEpicHeroes, spellDeck: shuffledSpells }\n    return deckObj;\n}\n\nexport const dealInitialCards = (bossDeck, roomDeck, dealInitialCardsAction, dispatch) => {\n    // console.log('dispatching hand');\n    let chosenBoss = bossDeck[bossDeck.length-1];\n    let roomLength = roomDeck.length-1;\n    let chosenRooms = [roomDeck[roomLength], roomDeck[roomLength-1], roomDeck[roomLength-2], roomDeck[roomLength-3], roomDeck[roomLength-4]];\n\n    dispatch(dealInitialCardsAction(chosenBoss, chosenRooms))\n\n}\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport '../css/Info.css'\nimport { buildingMode, selectCard } from '../../actions/miscActions';\nimport { nextGamePhase, dealHeroesToTown, dealRoomCard, updatePlayerTreasure, baitHeroes, nextRound, setHeroStartOfDungeon, damageHero, moveHeroNumberOfSteps, heroKilled, decreasePlayerHealth, playerKilled, resetPlayerCards, resetGame, addBuildActions, heroSurvived, changeSwapRoomsMode, damageRoom, changeShowDiscardPile, drawFromDiscard, addSoul, ableToDestroy, destroyRoom, discardCard } from '../../actions/sampleActions';\nimport { diceRoll } from '../gameLogic/diceRoll';\nimport { blankCard } from '../../assets/cards';\n\nimport { shuffleAllDecks} from '../gameLogic/initializingDeck';\nimport { shuffleAllDecksAction} from '../../actions/sampleActions';\nimport { useNavigate } from 'react-router-dom';\n\nfunction Info() {\n\n    const dispatch = useDispatch();\n    const navigate = useNavigate()\n\n    const gamePhase = useSelector(state => state.gamePhase.gamePhase)\n    const gameRound = useSelector(state => state.gamePhase.gameRound)\n    const playerRooms = useSelector(state => state.cardDecks.playerRooms)\n    const playerDungeon = useSelector(state => state.cardDecks.playerDungeon)\n    const playerHealth = useSelector(state => state.playerStats.health)\n    const playerSouls = useSelector(state => state.playerStats.souls)\n    const treasureCleric = useSelector(state => state.playerStats.treasureCleric)\n    const treasureFighter = useSelector(state => state.playerStats.treasureFighter)\n    const treasureThief = useSelector(state => state.playerStats.treasureThief)\n    const buildActions = useSelector(state => state.playerStats.buildActions)\n    const heroesAtStartOfDungeon = useSelector(state => state.cardDecks.heroesAtStartOfDungeon)\n    const heroRoomPosition = useSelector(state => state.heroStats.heroRoomPosition)\n    const buildingModeState = useSelector(state => state.misc.buildingMode)\n    const heroHealth = useSelector(state => state.heroStats.heroHealth)\n    const useButtonSwapping = useSelector(state => state.playerStats.useButtonSwapping)\n    const swapRoomsMode = useSelector(state => state.playerStats.swapRoomsMode)\n    const discardPile = useSelector(state => state.cardDecks.discardPile)\n    const showDiscardPile = useSelector(state => state.cardDecks.showDiscardPile)\n    const monsterCardFromDiscard = useSelector(state => state.cardDecks.monsterCardFromDiscard)\n    const trapCardFromDiscard = useSelector(state => state.cardDecks.trapCardFromDiscard)\n    const roomCardFromDiscard = useSelector(state => state.cardDecks.roomCardFromDiscard)\n    const username = useSelector(state => state.playerStats.username)\n\n    const selectedCard = useSelector(state => state.misc.card)\n    const selectedCardClass = useSelector(state => state.misc.className)\n\n    const destroyMode = useSelector(state => state.playerStats.destroyMode)\n\n    const [win, setWin] = useState(\"L\")\n\n    const [tempMessage, setTempMessage] = useState(\"\")\n    const [cardCount, setCardCount] = useState(0)\n    const [firstTimeInMaze, setFirstTimeInMaze] = useState(true)\n    const [countMinotaursMaze, setCountMinotaursMaze] = useState(2) // count used to only damage room once per hero (when Minotaur's Maze is in play)\n    const [countDracolichLair, setCountDracolichLair] = useState(2) // count used to count the number of cards that need to be discarded when using the Dracolich Lair ability \n    const [usingDracolichLair, setUsingDracolichLair] = useState(false) // count used to only damage room once per hero (when Minotaur's Maze is in play)\n\n    const [openGrave, setOpenGrave] = useState(true)\n    const [dracolichLair, setDracolichLair] = useState(true)\n    const [vampireBordello, setVampireBordello] = useState(true)\n    const [golemFactory, setGolemFactory] = useState(true)\n    const [bottomlessPit, setBottomlessPit] = useState(false)\n    const [boulderRamp, setBoulderRamp] = useState(false)\n    const [crushinator, setCrushinator] = useState(false)\n    const [crushinatorDamageModifier, setCrushinatorDamageModifier] = useState(false)\n    const [usedCardID, setUsedCardID] = useState(null)\n\n    console.log(playerDungeon);\n\n    useEffect(() => {\n        // used to reset the once per turn values\n        setGolemFactory(true)\n        setOpenGrave(true)\n        setDracolichLair(true)\n        setVampireBordello(true)\n        setCrushinatorDamageModifier(false)\n    }, [gameRound])\n\n    useEffect(() => {\n        dispatch(updatePlayerTreasure(playerDungeon))\n        // console.log('updating treasure');\n    }, [playerDungeon])\n\n    useEffect(() => {\n        setCardCount(0)\n    }, [selectedCard])\n\n    useEffect(() => {\n        // resets value to true so next hero will also be sent back to previous room one time\n        setFirstTimeInMaze(true)\n        setCountMinotaursMaze(2)\n    }, [heroesAtStartOfDungeon])\n\n    useEffect(() => {\n        \n        let dungeonContainersSelectedCard = false\n\n        playerDungeon.forEach(array => {\n            if(array[0] === selectedCard){\n                dungeonContainersSelectedCard = true\n            }\n        })\n\n        if(!dungeonContainersSelectedCard){\n            dispatch(selectCard(blankCard, \"cardDisplay\", blankCard.id))\n        }\n\n    }, [playerDungeon])\n\n// console.log(\"discardPile\", discardPile);\n\n    // checks if rooms have effects when the hero died\n    const heroDiedCheck = () => {\n        let roomName = playerDungeon[heroRoomPosition][0].name\n        // console.log('room hero died in: ', roomName);\n        if (golemFactory && roomName === \"Golem Factory\") {\n            dispatch(dealRoomCard())\n            setGolemFactory(false)\n        }\n        else if (vampireBordello && roomName === \"Vampire Bordello\" && playerHealth < 5) {\n            // console.log('healed by vampire bordello room');\n            dispatch(decreasePlayerHealth(-1))\n            dispatch(addSoul())\n            setVampireBordello(false)\n        }\n        else if (openGrave && roomName === \"Open Grave\") {\n            if (discardPile.length > 0) {\n                alert('The hero dies in the Open Grave. Select a Room Card below and click the \"USE\" button to add it to your hand.')\n                dispatch(changeShowDiscardPile(\"Room Card\"))\n                setOpenGrave(false)\n            }\n            else {\n                alert(\"The hero dies in the Open Grave but there are currently no cards in the discard pile. This card's effect is not triggered.\")\n            }\n        }\n    }\n\n    const handleChangeGamePhase = () => {\n        let message = \"\"\n        // if 1 and player has rooms in their hand\n        // console.log(gamePhase, playerRooms.length);numRoomsDestroyed\n        if (gamePhase === 1 && playerRooms.length) {\n            dispatch(updatePlayerTreasure(playerDungeon))\n            dispatch(nextGamePhase())\n        }\n        // if 2 and user clicks next this will update whether a spell card takes effect for the round\n        else if (gamePhase === 2) {\n            dispatch(nextGamePhase())\n        }\n        // if 3 moving to heroes to town phase\n        else if (gamePhase === 3) {\n            // if the game is in the first 4 rounds deal the ordinary heroes\n            if (gameRound <= 3) {\n                dispatch(dealHeroesToTown('ordinary', 1))\n            }\n            else if (gameRound <= 6) {\n                dispatch(dealHeroesToTown('ordinary', 2))\n            }\n            else if (gameRound <= 9) {\n                dispatch(dealHeroesToTown('ordinary', 3))\n            }\n            // if the game is past the 9th round deal the epic heroes\n            else if(gameRound <= 12){\n                dispatch(dealHeroesToTown('epic', 2))\n            }\n            else if(gameRound <= 14){\n                dispatch(dealHeroesToTown('epic', 3))\n            }\n            dispatch(nextGamePhase())\n        }\n        // if 4 moving to build phase\n        else if (gamePhase === 4) {\n            dispatch(addBuildActions(1)) // player can build 1 room per turn\n            dispatch(updatePlayerTreasure(playerDungeon))\n            dispatch(dealRoomCard())\n            dispatch(nextGamePhase())\n        }\n        else if (gamePhase === 5) {\n            // if build moving to bait and at least one room is built in dungeon\n            // console.log(playerDungeon[0][0].id!==\"D1\");\n            if (playerDungeon[0][0].id !== \"D1\") {\n                if (buildActions > 0) { // if player still has build actions when NEXT is clicked, alert pops up\n                    let proceedToNextPhase = window.confirm(\"You are proceeding to the next phase and still have unused build actions that will be lost.\")\n                    // console.log(proceedToNextPhase);\n                    if (proceedToNextPhase) {\n                        dispatch(baitHeroes(treasureCleric, treasureFighter, treasureThief))\n                        dispatch(nextGamePhase())\n                        dispatch(addBuildActions(-buildActions)) // removed build actions if player does not build that turn\n                    }\n                }\n                else {\n                    dispatch(baitHeroes(treasureCleric, treasureFighter, treasureThief))\n                    dispatch(nextGamePhase())\n                    dispatch(addBuildActions(-buildActions)) // removed build actions if player does not build that turn\n                }\n            }\n            else {\n                message += \"You must build at least one Room in your dungeon before moving to the bait phase! \"\n            }\n        }\n        else if (gamePhase === 6) {\n            if (!heroesAtStartOfDungeon.length) {\n\n                if (gameRound === 14) {\n                    setWin('W')\n                    dispatch(playerKilled())\n                }\n                else {\n                    dispatch(nextRound(playerDungeon))\n                }\n            }\n            else {\n                dispatch(setHeroStartOfDungeon(playerDungeon, heroesAtStartOfDungeon))\n                dispatch(nextGamePhase())\n            }\n        }\n        else if (gamePhase === 7) {\n            // if adventure and no heroes in dungeon\n            if (heroesAtStartOfDungeon.length === 0) {\n                if (gameRound === 14) {\n                    setWin('W')\n                    dispatch(playerKilled())\n                }\n                else {\n                    dispatch(nextRound(playerDungeon))\n                }\n            }\n            // if heroes inside dungeon\n            else {\n\n                // console.log(\"heroRoomPosition\", heroRoomPosition);\n                let damage = 0;\n\n                if (playerDungeon[heroRoomPosition][0].dmg === \"*\") {\n                    damage = roomBuffs(heroRoomPosition)\n                }\n                else {\n                    damage = playerDungeon[heroRoomPosition][0].dmg + roomBuffs(heroRoomPosition)\n                }\n\n                // checks to make sure the Minotaur's Maze isn't the first room in the dungeon.\n                // playerDungeon[heroRoomPosition + 1] in the if-statement ensures that room isn't undefined or null\n                if(playerDungeon[heroRoomPosition + 1] && playerDungeon[heroRoomPosition + 1][0].id !== \"D1\"){\n                    if (playerDungeon[heroRoomPosition][0].name === \"Minotaur's Maze\" && firstTimeInMaze) {\n                        dispatch(moveHeroNumberOfSteps(2))\n                        setFirstTimeInMaze(false)\n                        message += \"The Hero loses their way in the maze and returns to the previous room. \"\n                    }\n                }\n                if (firstTimeInMaze || countMinotaursMaze === 0) {\n                    if (playerDungeon[heroRoomPosition][0].durability > 0) {\n                        dispatch(damageRoom(playerDungeon[heroRoomPosition][0].id))\n                        // console.log(\"room damaged\");\n                    }\n                }\n                else if (!firstTimeInMaze) {\n                    setCountMinotaursMaze(countMinotaursMaze - 1)\n                    // console.log(\"countMinotaursMaze incremented to\", countMinotaursMaze);\n                }\n                \n                // console.log('room damage dealt to hero', damage);\n                // console.log('hero health', heroHealth);\n                let remainingHealth = heroHealth - damage;\n                // reduces room durability by 20 the first time a hero enters a room\n\n                // if hero has health after passing through the last room\n                if (heroRoomPosition === 0 && (remainingHealth > 0 || (damage === '*' && damage === 0))) {\n                    // if hero kills the boss, the player dies\n                    // console.log('hero fighting boss');\n                    if ((heroesAtStartOfDungeon[0].subtitle === \"Ordinary-Hero\" && playerHealth <= 1) || (heroesAtStartOfDungeon[0].subtitle === \"Epic-Hero\" && playerHealth <= 2)) {\n                        // console.log('hero defeats boss');\n                        dispatch(decreasePlayerHealth(playerHealth))\n                        dispatch(playerKilled())\n                    }\n                    // if boss has enough health to survive the wound\n                    else {\n                        if (heroesAtStartOfDungeon[0].subtitle === \"Ordinary-Hero\") {\n                            dispatch(decreasePlayerHealth(1))\n                            if (damage === 0) {\n                                message += `The hero survives your dungeon with ${remainingHealth} HP. You sustain a wound. `\n                            }\n                            else {\n                                message += `The room deals ${damage} damage to the Hero. The hero survives your dungeon with ${remainingHealth} HP. You sustain a wound. `\n                            }\n\n                        }\n                        else if (heroesAtStartOfDungeon[0].subtitle === \"Epic-Hero\") {\n                            dispatch(decreasePlayerHealth(2))\n                            if (damage === 0) {\n                                message += `The hero survives your dungeon with ${remainingHealth} HP. You sustain two wounds. `\n                            }\n                            else {\n                                message += `The room deals ${damage} damage to the Hero. The hero survives your dungeon with ${remainingHealth} HP. You sustain two wounds. `\n                            }\n                        }\n\n                        // console.log('hero damage to boss', remainingHealth);\n                        if (heroesAtStartOfDungeon.length === 1) {\n                            dispatch(heroSurvived(true, playerDungeon, heroesAtStartOfDungeon))\n                            if (gameRound === 14) {\n                                setWin('W')\n                                dispatch(playerKilled())\n                            }\n                            else {\n                                dispatch(nextRound(playerDungeon))\n                            }\n                        }\n                        else {\n                            dispatch(heroSurvived(false, playerDungeon, heroesAtStartOfDungeon))\n                        }\n                    }\n                }\n                // if hero is not in the last room or has no health after passing the last room\n                else {\n                    // if hero passes through room that deals no damage\n                    if (damage === 0) {\n                        // console.log('HERO MOVING');\n                        dispatch(moveHeroNumberOfSteps(-1))\n                        message += \"The Hero moves further in the dungeon unharmed. \"\n                    }\n                    // if hero hit and still has health\n                    else if (remainingHealth > 0) {\n                        // console.log('HERO Wounded');\n                        dispatch(damageHero(damage))\n                        dispatch(moveHeroNumberOfSteps(-1))\n                        message += `The room deals ${damage} damage to the Hero. The Hero was wounded but passes the room. The Hero has ${heroHealth - damage} health. `\n                    }\n                    // if hero is hit and killed\n                    else {\n                        if (heroesAtStartOfDungeon.length === 1) {\n                            dispatch(heroKilled(true, playerDungeon, heroesAtStartOfDungeon))\n                            message += `The room deals ${damage} damage to the Hero. The Hero was slain in your dungeon. Another soul has been added to your collection. `\n                            if (gameRound === 14) {\n                                setWin('W')\n                                dispatch(playerKilled())\n                            }\n                            else {\n                                heroDiedCheck()\n                                dispatch(nextRound(playerDungeon))\n                            }\n                        }\n                        else {\n                            heroDiedCheck()\n                            dispatch(heroKilled(false, playerDungeon, heroesAtStartOfDungeon))\n                            message += `The room deals ${damage} damage to the Hero. The Hero was slain in your dungeon. Another soul has been added to your collection. `\n                        }\n                    }\n                }\n            }\n        }\n\n        // if game over and moving to restart\n        else if (gamePhase === 10) {\n            // const saveScore = async() => {\n            //     let response = await fetch('/savescore');\n            //     await response.json();\n            // }\n            // saveScore();\n            let shuffledDecks = shuffleAllDecks();\n            dispatch(shuffleAllDecksAction(shuffledDecks));\n            dispatch(resetPlayerCards())\n            dispatch(resetGame())\n        }\n        setTempMessage(message)\n    }\n\n    const renderMessageSwitch = (gamePhase) => {\n        // console.log('running switch');\n        switch (gamePhase) {\n            case 1:\n                return <div className='messageBox'><div className='message'>{tempMessage ? tempMessage : \"Welcome to Boss Monster. Build your dungeon to lure heroes and steal their souls. You were dealt 5 Room cards and 1 Boss Card. You can build 1 room in your dungeon.\"}</div></div>\n            case 2:\n\n                return <div className='messageBox'><div className='message'>{tempMessage} This is the start of round {gameRound}.</div></div>\n            case 3:\n\n                let { rollNumber, isHit } = diceRoll(gameRound);\n\n                return <div className='messageBox'>\n                    <div className='message'>Rolling a dice to see if you are hit by spell!</div>\n                    <div className='message'>Dice Result: {rollNumber}</div>\n                    {isHit ? <div className='message'>You are Hit!</div> : <div className='message'>You manage to avoid the spell!</div>}\n                </div>\n            case 4:\n                return <div className='messageBox'><div className='message'>Adventurers wandering into Town.</div></div>\n            case 5:\n                return <div className='messageBox'><div className='message'>{tempMessage ? tempMessage : `You were dealt one Room Card. You can build in your dungeon.`}</div></div>\n            case 6:\n                return <div className='messageBox'><div className='message'>The heroes decide whether it's worth it to steal your stuff.</div> <div className='message'>{heroesAtStartOfDungeon.length} heroes are heading towards your dungeon. {(heroesAtStartOfDungeon.length) ? `A ${heroesAtStartOfDungeon[0].name} enters first.` : `Since no heroes entered your dungeon, this is the end of round ${gameRound}.`}</div></div>\n            case 7:\n                return <div className='messageBox'><div className='message'>{tempMessage ? tempMessage : \"The hero is fighting your dungeon. Use spells or effect to help your rooms.\"}</div></div>\n            case 10:\n                return <div className='messageBox'><div className='message'>{win === \"L\" ? `You have been defeated! You made it through ${gameRound - 1} ${(gameRound !== 2) ? \"rounds\" : \"round\"} and collected ${playerSouls} ${(playerSouls !== 1) ? \"souls\" : \"soul\"}. Click \"SAVE\" to save your score or click \"NEXT\" to start a New Game.` : `You managed to survive the heroes' attacks until you finally decide to retire from being a boss...satisfied, and letting a new boss take your place. You were able to collect ${playerSouls} ${(playerSouls !== 1) ? \"souls\" : \"soul\"}! Click \"SAVE\" to save your score or click \"NEXT\" to start a New Game.`}</div></div>\n            default:\n                break;\n        }\n    }\n\n    const renderGamePhaseSwitch = (gamePhase) => {\n        switch (gamePhase) {\n            case 1:\n                return `Pre-Game`\n            case 2:\n                return `Beginning of Round`\n            case 3:\n                return `Dice-Roll`\n            case 4:\n                return `Dealing Heroes`\n            case 5:\n                return `Build Room`\n            case 6:\n                return `Adventure`\n            case 7:\n                return `Adventure`\n            case 10:\n                return <div>{win === \"L\" ? `Game Over` : `You Won!`}</div>\n            default:\n                break;\n        }\n    }\n\n    const handleNextButtonClick = () => {\n        handleChangeGamePhase();\n    }\n\n    const handleBuildButtonClick = (className) => {\n\n        if (className === \"handCard\") {\n            if (buildActions > 0 && (gamePhase === 1 || gamePhase === 5)) {\n                // turns building mode on and off\n                dispatch(buildingMode())\n            }\n            else if (buildActions === 0) {\n                alert(\"You have no more build actions this turn.\")\n            }\n            else if (gamePhase !== 1 || gamePhase !== 5) {\n                alert(\"You can only build during the build phase.\")\n            }\n        }\n        else {\n            alert(\"You can only build cards from your hand. Select a card from your hand, click \\\"Build\\\" and then select a spot to build your new dungeon room.\")\n        }\n\n    }\n\n    // function to show previous card in roomStack\n    const previousCardClick = () => {\n\n        if (cardCount === 0) {\n            setCardCount(roomStack.length - 1)\n        }\n        else {\n            setCardCount(cardCount - 1)\n        }\n    }\n\n    // function to show next card in roomStack\n    const nextCardClick = () => {\n\n        if (cardCount === (roomStack.length - 1)) {\n            setCardCount(0)\n        }\n        else {\n            setCardCount(cardCount + 1)\n        }\n    }\n\n    // grabbing stack of rooms in playerDungeon of selectedCard\n    let roomStack = []\n    playerDungeon.forEach(roomArr => {\n        if (roomArr[0].id === selectedCard.id) {\n            roomStack = [...roomArr]\n        }\n    })\n\n    const roomBuffs = (i) => {\n        let damageBuff = 0\n        if(crushinatorDamageModifier){\n            damageBuff += 2\n        }\n        // if current room is a trap room & the previous room is a Dizzygas Hallway, damage is buffed\n        if (i < 5 && (playerDungeon[i][0].subtitle === \"Trap Room\" || playerDungeon[i][0].subtitle === \"Advanced Trap Room\") && playerDungeon[i + 1][0].name === \"Dizzygas Hallway\") {\n            damageBuff += 2\n            // console.log(\"Dizzygas Hallway\");\n        }\n        // if current room is monster room & previous room is Goblin Armory, damage is buffed\n        else if (i < 5 && (playerDungeon[i][0].subtitle === \"Monster Room\" || playerDungeon[i][0].subtitle === \"Advanced Monster Room\") && playerDungeon[i + 1][0].name === \"Goblin Armory\") {\n            damageBuff += 1\n            // console.log(\"Goblin Armory\")\n        }\n        // if current room is monster room & next room is Goblin Armory, damage is buffed\n        else if (i > 0 && (playerDungeon[i][0].subtitle === \"Monster Room\" || playerDungeon[i][0].subtitle === \"Advanced Monster Room\") && playerDungeon[i - 1][0].name === \"Goblin Armory\") {\n            damageBuff += 1\n            // console.log(\"Goblin Armory\")\n        }\n        // if current room is Monster's Ballroom, damage is buffed based on number of Monster or Advanced Monster Rooms in dungeon\n        if (playerDungeon[i][0].name === \"Monster's Ballroom\") {\n            let numberOfMonsterRooms = 0\n            playerDungeon.forEach(cardArr => {\n                console.log(cardArr[0])\n                if (cardArr[0].subtitle.includes(\"Monster\")) {\n                    numberOfMonsterRooms += 1\n                }\n            })\n            // console.log(\"numberOfMonsterRooms\", numberOfMonsterRooms);\n            damageBuff += numberOfMonsterRooms\n        }\n        // console.log(\"damageBuff\", damageBuff);\n        return damageBuff\n    }\n\n    // console.log(\"selectedCard\", selectedCard)\n    // console.log(\"selectedCardClass\", selectedCardClass)\n\n    const handleUseButtonClick = () => {\n        // if in swapping rooms mode and the selected card is in the dungeon\n        if (selectedCardClass === \"room\" || selectedCardClass === \"roomStack\" ||  selectedCardClass === \"discardCard\" || selectedCardClass === \"builtRoom\" || (usingDracolichLair && selectedCardClass === \"handCard\")) {\n            if (useButtonSwapping) {\n                console.log(\"swapping is allowed\");\n                dispatch(changeSwapRoomsMode())\n                return\n            }\n\n            if (usingDracolichLair && selectedCardClass === \"handCard\") {\n                if (countDracolichLair > 0) {\n                    dispatch(discardCard(selectedCard.id))\n                    setCountDracolichLair(countDracolichLair - 1)\n                    // console.log(\"countDracolichLair\", countDracolichLair);\n                    // countDracolichLair is delayed in decrementing so if-statement below checks when countDracolich lair === 1\n                    if (countDracolichLair === 1) {\n                        setCountDracolichLair(2)\n                        setUsingDracolichLair(false)\n                        setDracolichLair(false)\n                        dispatch(changeShowDiscardPile(\"Room Card\"))\n                    }\n                }\n                return\n            }\n\n            if (showDiscardPile) {\n                if (roomCardFromDiscard && selectedCard.subtitle.includes(\"Room\")) {\n                    dispatch(drawFromDiscard(selectedCard.id))\n                    dispatch(changeShowDiscardPile())\n                }\n                else if (monsterCardFromDiscard && selectedCard.subtitle.includes(\"Monster\")) {\n                    dispatch(drawFromDiscard(selectedCard.id))\n                    dispatch(changeShowDiscardPile(\"Monster Room\"))\n                }\n                else if (trapCardFromDiscard && selectedCard.subtitle.includes(\"Trap\")) {\n                    dispatch(drawFromDiscard(selectedCard.id))\n                    dispatch(changeShowDiscardPile(\"Trap Room\"))\n                }\n                else {\n                    alert('Please select an appropriate card from the discard pile and then click the \"USE\" button.')\n                }\n                return\n            }\n\n            if (!crushinator && selectedCard.name === \"Dracolich Lair\" && dracolichLair && (selectedCardClass === \"roomStack\" || selectedCardClass === \"builtRoom\")) {\n                setUsingDracolichLair(true)\n                alert('You must discard two cards from your hand. Select one card and click the \"USE\" button, then select the second card and click the \"USE\" button.')\n                return\n            }\n            // if user selects a card that allows them to destroy a room\n            else if (!swapRoomsMode && selectedCard.name === \"Boulder Ramp\") {\n                // console.log(\"bouler room use effect\");\n                if (!destroyMode && gamePhase === 7) {\n                    dispatch(ableToDestroy())\n                    setBoulderRamp(true)\n                    setUsedCardID(selectedCard.id)\n                    setTempMessage(\"You are able to destroy a room in your dungeon. Select a room and click 'destroy'.\")\n                }\n                if (!destroyMode && gamePhase !== 7) {\n                    setTempMessage(\"You can only destroy rooms during the Adventure Phase.\")\n                }\n            }\n            else if (selectedCard.name === \"Bottomless Pit\") {\n                if (!destroyMode && gamePhase === 7) {\n                    dispatch(ableToDestroy())\n                    setBottomlessPit(true)\n                    setUsedCardID(selectedCard.id)\n                    setTempMessage(\"You are able to destroy the Bottomless Pit. Select this room and click 'destroy'.\")\n                }\n                if (!destroyMode && gamePhase !== 7) {\n                    setTempMessage(\"You can only destroy rooms during the Adventure Phase.\")\n                }\n            }\n            else if (selectedCard.name === \"The Crushinator\") {\n                if (!destroyMode && gamePhase === 7) {\n                    dispatch(ableToDestroy())\n                    setCrushinator(true)\n                    setUsedCardID(selectedCard.id)\n                    setTempMessage(\"You are able to destroy another room in order to buff the rest of your rooms.\")\n                }\n                else if (!destroyMode && gamePhase !== 7) {\n                    setTempMessage(\"You can only destroy rooms during the Adventure Phase.\")\n                }\n            }\n            else if(selectedCard.name === \"Dark Altar\" && !destroyMode){\n                if(discardPile.length > 0){\n                    let roomIndex = null;\n                    playerDungeon.forEach((array, index) => {\n                        if (array[0] === selectedCard) {\n                            roomIndex = index;\n                        }\n                    })\n                    dispatch(destroyRoom(roomIndex, selectedCardClass))\n                    dispatch(changeShowDiscardPile())\n                }\n                else{\n                    let destroyRoomAnyway = window.confirm('There are currently no cards in the discard pile. Destroying this card will not trigger its effect. Click \"OK\" to continue destroying the room.')\n                    if(destroyRoomAnyway){\n                        let roomIndex = null;\n                        playerDungeon.forEach((array, index) => {\n                            if (array[0] === selectedCard) {\n                                roomIndex = index;\n                            }\n                        })\n                        dispatch(destroyRoom(roomIndex, selectedCardClass))\n                        dispatch(changeShowDiscardPile())\n                    }\n                }\n            }\n\n            // if the button is in the destroy mode and the user has already selected a card in the dungeon\n            if (destroyMode) {\n                if (bottomlessPit && selectedCard.name === \"Bottomless Pit\") {\n                    if(usedCardID === selectedCard.id){\n                        checkRoomDestroyEffects()\n                        let roomIndex = null;\n                        playerDungeon.forEach((array, index) => {\n                            if (array[0] === selectedCard) {\n                                roomIndex = index;\n                            }\n                        })\n                        dispatch(destroyRoom(roomIndex, selectedCardClass))\n                        dispatch(ableToDestroy())\n                        setBottomlessPit(false)\n                    }\n                    else{\n                        alert(\"You can only destroy the current room with the Bottomless Pit's ability\")\n                    }\n                }\n                else if (boulderRamp) {\n                    if(usedCardID !== selectedCard.id){\n                        checkRoomDestroyEffects()\n                        let roomIndex = null;\n                        playerDungeon.forEach((array, index) => {\n                            if (array[0] === selectedCard) {\n                                roomIndex = index;\n                            }\n                        })\n                        dispatch(destroyRoom(roomIndex, selectedCardClass))\n                        dispatch(ableToDestroy())\n                        setBoulderRamp(false)\n                    }\n                    else{\n                        alert(\"You can only destroy another room with the Boulder Room's ability\")\n                    }\n                }\n                else if (crushinator) {\n                    if(usedCardID !== selectedCard.id){\n                        checkRoomDestroyEffects()\n                        let roomIndex = null;\n                        playerDungeon.forEach((array, index) => {\n                            if (array[0] === selectedCard) {\n                                roomIndex = index;\n                            }\n                        })\n                        dispatch(destroyRoom(roomIndex, selectedCardClass))\n                        dispatch(ableToDestroy())\n                        setCrushinator(false)\n                        setCrushinatorDamageModifier(true)\n                    }\n                    else{\n                        alert(\"You can only destroy another room with the Crushinator's ability\")\n                    }\n                }\n            }\n        }\n        else {\n            setTempMessage('You can only use effects from rooms in your dungeon.')\n        }\n    }\n\n    const checkRoomDestroyEffects = () => {\n        let tempMSG = \"\";\n        // console.log('room name', playerDungeon[heroRoomPosition][0]);\n        playerDungeon.forEach(array => {\n            if (array[0].name === \"Recycling Center\") {\n                dispatch(dealRoomCard())\n                dispatch(dealRoomCard())\n                tempMSG += \"You were dealt two cards from the recycling center after a room was destroyed. \"\n            }\n        })\n        // dont run this if the crushinator is active so the player doesnt get both buffs (crushinator damage and these rooms' damage)\n        if(!crushinator && usedCardID === playerDungeon[heroRoomPosition][0].id) {\n            // these check if hero is on a room that has an effect when other rooms are destroyed\n            switch (playerDungeon[heroRoomPosition][0].name) {\n                case \"Boulder Ramp\":\n                    // console.log('hero on boulder ramp when destroyed');\n                    if (heroHealth <= 5) {\n                        // console.log('hero less than or 5 health');\n                        tempMSG += \"The hero was killed by the Boulder Ramp.\"\n                        heroDiedCheck()\n                        if (heroesAtStartOfDungeon.length === 1) {\n                            dispatch(heroKilled(true, playerDungeon, heroesAtStartOfDungeon))\n                        }\n                        else {\n                            dispatch(heroKilled(false, playerDungeon, heroesAtStartOfDungeon))\n                        }\n                    }\n                    else {\n                        tempMSG += \"The hero was wounded by the Boulder Ramp.\"\n                        // console.log('hero more than 5 health');\n                        dispatch(damageHero(5))\n                    }\n                    setTempMessage(tempMSG)\n                    break;\n                case \"Bottomless Pit\":\n                    tempMSG += \"The hero was killed by the Bottomless Pit.\"\n                    if (heroesAtStartOfDungeon.length === 1) {\n                        dispatch(heroKilled(true, playerDungeon, heroesAtStartOfDungeon))\n                    }\n                    else {\n                        dispatch(heroKilled(false, playerDungeon, heroesAtStartOfDungeon))\n                    }\n                    setTempMessage(tempMSG)\n                    break\n                default:\n                    break;\n            }\n        }\n    }\n\n    const handleCancelClick = () => {\n        // resetting values to false if \"Cancel button is clicked\"\n        if (monsterCardFromDiscard) {\n            dispatch(changeShowDiscardPile(\"Monster Room\"))\n        }\n        if (trapCardFromDiscard) {\n            dispatch(changeShowDiscardPile(\"Trap Room\"))\n        }\n        if (roomCardFromDiscard) {\n            dispatch(changeShowDiscardPile())\n        }\n        if (gamePhase === 10) {\n            const saveScore = async () => {\n                let userInfo = {\n                    username,\n                    souls: playerSouls,\n                    win\n                }\n                let response = await fetch('https://bossmonsterserver.herokuapp.com/savescore', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(userInfo)\n                });\n                await response.json();\n            }\n            saveScore();\n            navigate('/dungeon-masters') \n        }\n        if (destroyMode) {\n            dispatch(ableToDestroy())\n            setTempMessage(\"You can no longer destroy a room.\")\n        }\n    }\n\n    return (\n        <div className='infoBody'>\n\n            {/* -- INFO AREA -- */}\n            <div className='cardInfoArea'>\n                {roomStack.length > 1\n                    ?\n                    <>\n                        <div className='displaySection'>\n                            <img src={roomStack[cardCount].image} className='cardDisplay' />\n                            <div className=\"cardCountContainer\">\n                                <span className=\"cardCountLabel\">Card:{cardCount + 1}/{roomStack.length} </span>\n                                &nbsp;\n                                <span className=\"cardStackButtons\" onClick={previousCardClick}>&#171;</span>\n                                &nbsp;\n                                <span className=\"cardStackButtons\" onClick={nextCardClick}>&#187;</span>\n                            </div>\n                        </div>\n                        <div className='infoSection'>\n                            <>\n                                <div className='title'>{roomStack[cardCount].name}</div>\n                                <div className='information'>{roomStack[cardCount].subtitle}</div>\n                                {roomStack[cardCount].HP && <div className='information'>HP: {roomStack[cardCount].HP}</div>}\n                                {roomStack[cardCount].dmg !== undefined && <div className='information'>DMG: {roomStack[cardCount].dmg}</div>}\n                                {roomStack[cardCount].durability && <div className='information'>Durability: {roomStack[cardCount].durability}/100</div>}\n                                {roomStack[cardCount].xp && <div className='information'>XP: {roomStack[cardCount].xp}</div>}\n                                {roomStack[cardCount].treasure && <div className='information'>Treasure: {roomStack[cardCount].treasure}</div>}\n                                <div className='cardDescription'>{roomStack[cardCount].description}</div>\n                            </>\n                        </div>\n                    </>\n                    :\n                    <>\n                        <div className='displaySection'>\n                            <img src={selectedCard.image} className='cardDisplay' />\n                        </div>\n                        <div className='infoSection'>\n                            {selectedCard &&\n                                <>\n                                    <div className='title'>{selectedCard.name}</div>\n                                    <div className='information'>{selectedCard.subtitle}</div>\n                                    {selectedCard.HP && <div className='information'>HP: {selectedCard.HP}</div>}\n                                    {selectedCard.dmg !== undefined && <div className='information'>DMG: {selectedCard.dmg}</div>}\n                                    {selectedCard.durability && <div className='information'>Durability: {selectedCard.durability}/100</div>}\n                                    {selectedCard.xp && <div className='information'>XP: {selectedCard.xp}</div>}\n                                    {selectedCard.treasure && <div className='information'>Treasure: {selectedCard.treasure}</div>}\n                                    <div className='cardDescription'>{selectedCard.description}</div>\n                                </>\n                            }\n                        </div>\n                    </>\n                }\n            </div>\n\n            {/* -- BUTTON AREA -- */}\n            <div className='buttonArea'>\n                <div className='phaseInfo'>Phase: {renderGamePhaseSwitch(gamePhase)} {gamePhase === 7 ? `Hero HP: ${heroHealth}` : null}</div>\n                <div className='buttonList'>\n                    {/* <div className='button'>STORE</div> */}\n                    {(gamePhase === 10 || showDiscardPile || destroyMode) ? <div className='button' onClick={handleCancelClick}>{gamePhase === 10 ? \"SAVE\" : \"CANCEL\"}</div> : null}\n                    {gamePhase === 10 ? null : <div onClick={handleUseButtonClick} className={swapRoomsMode ? 'buttonBuild' : 'button'}>{destroyMode ? \"DESTROY\" : useButtonSwapping ? \"SWAP\" : \"USE\"}</div>}\n                    {useButtonSwapping || gamePhase === 10 ? null : <div className={buildingModeState ? 'buttonBuild' : 'button'} onClick={() => handleBuildButtonClick(selectedCardClass)}>BUILD</div>}\n                    {useButtonSwapping ? null : <div onClick={() => handleNextButtonClick()} className='button'>NEXT</div> }\n                </div>\n            </div>\n\n            {/* -- MESSAGE AREA -- */}\n            <div className='messageArea'>\n                {renderMessageSwitch(gamePhase)}\n            </div>\n        </div>\n    )\n}\n\nexport default Info\n","\n\nexport const diceRoll = (gameRound) => {\n    let rollNumber = Math.ceil(Math.random()*6)\n    let isHit = false;\n    (rollNumber<gameRound)? isHit=true: isHit=false;\n    return {rollNumber, isHit}\n}\n","\nimport React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selectCard } from '../../actions/miscActions'\n\nfunction Card({cardObj, className}) {\n\n  const dispatch = useDispatch()\n  const swapRoomsMode = useSelector(state => state.playerStats.swapRoomsMode)\n\n  const handleCardClick = () => {\n    if(!swapRoomsMode){\n      dispatch(selectCard(cardObj, className, cardObj.id))\n    }\n    else if(swapRoomsMode && !(className === \"room\" || className === \"roomStack\")){\n      alert(\"You can only swap card in your dungeon.\")\n    }\n  }\n\n  return (\n    <>\n      <img id={cardObj.id} src={cardObj.image} className={className} alt={cardObj.subtitle} name={cardObj.name} onClick={()=>handleCardClick()}/><br></br>\n    </>\n  )\n}\n\nexport default Card\n","import React from 'react'\nimport '../css/Hand.css'\nimport Card from './Card'\nimport { useSelector } from 'react-redux';\n\nfunction Hand() {\n\n    const playerRooms = useSelector(state => state.cardDecks.playerRooms)\n    const discardPile = useSelector(state => state.cardDecks.discardPile)\n    const showDiscardPile = useSelector(state => state.cardDecks.showDiscardPile)\n\n    return (\n        <div className='handContainer'>\n            {showDiscardPile\n            ?\n            <>\n                {discardPile.length > 0\n                ?\n                <>\n                    <div className=\"cardDeckLabel\">Discard Pile</div>\n                    <div className=\"handBody\">\n                        {discardPile.map((roomCard, index)=>{\n                                return <Card cardObj={roomCard} className=\"discardCard\" key={index}/>\n                            })\n                        }\n                    </div>\n                </>\n                :\n                <div className=\"cardDeckLabel\">The Discard Pile is Empty</div>\n                }\n            </>\n            :\n            <>\n                <div className=\"cardDeckLabel\">Player Hand</div>\n                <div className=\"handBody\">\n                    {playerRooms && playerRooms.map((roomCard, index)=>{\n                            return <Card cardObj={roomCard} className=\"handCard\" key={index}/>\n                        })\n                    }\n                </div>\n            </>\n            }\n        </div>\n    )\n}\n\nexport default Hand\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport '../css/Event.css'\n\nfunction Event() {\n    const health = useSelector(state => state.playerStats.health)\n    const souls = useSelector(state => state.playerStats.souls)\n    const builds = useSelector(state => state.playerStats.buildActions)\n    const gameRound = useSelector(state => state.gamePhase.gameRound)\n\n    return (\n        <div className='eventBody'>\n            {/* -- HEARTS -- */}\n            <div className='health'>\n                HP:\n                {Array.from(Array(health), (e, i) => {\n                    return <img src='/heart.png' className='heart' key={i}></img>\n                })}\n                {/* <img src='/heart.png' className='heart'></img> */}\n            </div>\n\n            {/* -- SOULS -- */}\n            <div className='souls'>\n                Souls:\n                <div className='soul'>{souls}</div>\n            </div>\n\n            {/* -- BUILDS -- */}\n            <div className='souls'>\n                Builds:\n                <div className='soul'>{builds}</div>\n            </div>\n            <div className='rounds'>\n                Round:\n                <div className='round'>{gameRound}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default Event\n","import React from 'react'\nimport '../css/Town.css'\nimport Card from './Card'\nimport { useSelector } from 'react-redux';\n\nfunction Town() {\n\n    const heroesInTown = useSelector(state => state.cardDecks.heroesInTown)\n    const heroesAtStartOfDungeon = useSelector(state => state.cardDecks.heroesAtStartOfDungeon)\n\n    return (\n        <div className='townBody'>\n            <div className='townTitle'>{heroesAtStartOfDungeon.length ? \"Heroes going to Dungeon\" : \"Town\"}</div>\n            <div className='townList'>\n                {!heroesAtStartOfDungeon.length ?\n                    // {\n                    heroesInTown && heroesInTown.map((roomCard, index) => {\n                        return <Card cardObj={roomCard} className=\"townCard\" key={index} />\n                    })\n                    // }\n                    :\n                    heroesAtStartOfDungeon.slice(1).map((roomCard, index) => {\n                        return <Card cardObj={roomCard} className=\"townCard\" key={index} />\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Town\n","import React from 'react'\nimport '../css/Username.css'\nimport { useSelector} from 'react-redux';\n\nfunction Username() {\n\n    const username = useSelector(state => state.playerStats.username)\n\n    return (\n        <div className='usernameBody'>\n            {username}\n        </div>\n    )\n}\n\nexport default Username\n","import React, { useState, useEffect } from 'react'\nimport '../css/Dungeon.css'\n// import { bossDeck } from \"../../assets/cards\"\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectCard, buildingMode } from '../../actions/miscActions';\nimport { buildDungeon, addBuildActions, changeUseButtonSwapping, swapRooms, changeSwapRoomsMode, dealRoomCard, changeShowDiscardPile, drawFromDiscard } from '../../actions/sampleActions';\nimport Card from './Card'\nimport { cardBack } from '../../assets/cards';\n\nfunction Dungeon() {\n\n    const dispatch = useDispatch()\n\n    const playerDungeon = useSelector(state => state.cardDecks.playerDungeon)\n    const heroesAtStartOfDungeon = useSelector(state => state.cardDecks.heroesAtStartOfDungeon)\n    const heroRoomPosition = useSelector(state => state.heroStats.heroRoomPosition)\n    const buildingModeState = useSelector(state => state.misc.buildingMode)\n    const selectedCard = useSelector(state => state.misc.card)\n    const selectedCardClass = useSelector(state => state.misc.className)\n    const playerBoss = useSelector(state => state.cardDecks.playerBoss)\n    const swapRoomsMode = useSelector(state => state.playerStats.swapRoomsMode)\n    const gameRound = useSelector(state => state.gamePhase.gameRound)\n    const discardPile = useSelector(state => state.cardDecks.discardPile)\n    const destroyMode = useSelector(state => state.playerStats.destroyMode)\n\n    const [beastMenagerieFirstTime, setBeastMenagerieFirstTime] = useState(true)\n    \n    \n\n    useEffect(() => {\n        // resets value to true on gameRound change so Beast Menagerie room effect happens once per turn\n        setBeastMenagerieFirstTime(true)\n    }, [gameRound])\n\n\n    const renderHeroAtPosition = () => {\n        let renderHeroArray = []\n        for (let roomIndex = 5; roomIndex >= 0; roomIndex--) {\n            if (heroRoomPosition===roomIndex) {\n                renderHeroArray.push(<Card cardObj={heroesAtStartOfDungeon[0]} className=\"hero\"/>)\n            }\n            else{\n                renderHeroArray.push(<Card cardObj={cardBack} className=\"hero hero_blank\"/>)\n            }\n        }\n        return renderHeroArray;\n    }\n\n    const handleBuild = (e) => {\n        // console.log(\"e.target\", e.target);\n        // console.log(\"e.target.className\", e.target.className);\n\n        // if the state is in swapping mode and the user clicks to swap\n        if(swapRoomsMode && (e.target.className === \"room\" || e.target.className === \"roomStack\") && (selectedCardClass === 'room' || selectedCardClass === 'roomStack')){\n            // Make is so player can't swap with empty room.\n            if(e.target.id !== \"D1\" && selectedCard.id !== \"D1\"){\n                // console.log('swapping rooms');\n                // console.log(e.target);\n                dispatch(swapRooms(selectedCard.id, e.target.id))\n                dispatch(changeSwapRoomsMode())\n                dispatch(changeUseButtonSwapping())\n                return\n            }\n        }\n        \n        // if the state is in building mode\n        if(buildingModeState){\n            // Checks if the selected card is an Advanced Trap Room\n            if(selectedCard.subtitle === \"Advanced Trap Room\"){\n                if(e.target.alt === \"Trap Room\" || e.target.alt === \"Advanced Trap Room\"){\n                    passiveAbilities(selectedCard.name)\n                    dispatch(buildDungeon(selectedCard, e.target.id))\n                    dispatch(addBuildActions(-1)) // decreasing buildActions by 1\n                \n                    // keeps players from building the same repeatedly\n                    dispatch(selectCard(selectedCard, \"builtRoom\"))\n        \n                    // turns buildingMode off after building room\n                    dispatch(buildingMode())\n                }\n                else{\n                    alert(\"Advanced Trap Rooms can only be built on ordinary or Advanced Trap Rooms.\")\n                    // turns buildingMode off\n                    dispatch(buildingMode())\n                }\n            }\n            // Checks if the selected card is an Advanced Monster Room\n            else if(selectedCard.subtitle === \"Advanced Monster Room\"){\n                if(e.target.name === \"Neanderthal Cave\"){\n                    alert(\"Advanced Monster Rooms cannot be built on the Neanderthal Cave.\")\n                    dispatch(buildingMode())\n                }\n                else if(e.target.alt === \"Monster Room\" || e.target.alt === \"Advanced Monster Room\"){\n                    passiveAbilities(selectedCard.name)\n                    beastMenagerieInDungeon()\n                    dispatch(buildDungeon(selectedCard, e.target.id))\n                    dispatch(addBuildActions(-1)) // decreasing buildActions by 1\n                \n                    // keeps players from building the same repeatedly\n                    dispatch(selectCard(selectedCard, \"builtRoom\"))\n        \n                    // turns buildingMode off after building room\n                    dispatch(buildingMode())\n                }\n                else{\n                    alert(\"Advanced Monster Rooms can only be built on ordinary or Advanced Monster Rooms.\")\n                    // turns buildingMode off\n                    dispatch(buildingMode())\n                }\n            }\n            else if(buildingModeState && e.target.id !== \"\"){\n                let monsterCardsInDiscard = false\n                discardPile.forEach(cardObj => {\n                    if(cardObj.subtitle === \"Monster Room\" || cardObj.subtitle === \"Advanced Monster Room\"){\n                        monsterCardsInDiscard = true\n                    }\n                })\n\n                if(selectedCard.name === \"Monstrous Monument\" && !monsterCardsInDiscard){\n                    let doNoDrawCard = window.confirm(\"There are currently no Monster Room cards in the discard pile. Playing this card will not activate it's ability.\")\n                    if(doNoDrawCard){\n                        // passiveAbilities is not being run since player does not want to draw a card\n                        dispatch(buildDungeon(selectedCard, e.target.id))\n                        dispatch(addBuildActions(-1)) // decreasing buildActions by 1\n                        \n                        // keeps players from building the same repeatedly\n                        dispatch(selectCard(selectedCard, \"builtRoom\"))\n    \n                        // turns buildingMode off after building room\n                        dispatch(buildingMode())\n                    }\n                }\n                else{\n                    passiveAbilities(selectedCard.name)\n                    dispatch(buildDungeon(selectedCard, e.target.id))\n                    dispatch(addBuildActions(-1)) // decreasing buildActions by 1\n                    \n                    // keeps players from building the same repeatedly\n                    dispatch(selectCard(selectedCard, \"builtRoom\"))\n\n                    // turns buildingMode off after building room\n                    dispatch(buildingMode())\n                }\n\n            }\n        }\n    }\n\n    const passiveAbilities = (cardName) => {\n        // putting Beast Menagerie function here since it is a passive ability\n        beastMenagerieInDungeon()\n        switch(cardName){\n            // \"When you build this room, you may immediately build an additional Room.\"\n            case \"Construction Zone\":\n                dispatch(addBuildActions(1))\n                break\n                // When you build this room, you can draw a \"Monster Room\" card from the discard pile.\n            case \"Monstrous Monument\":\n                dispatch(changeShowDiscardPile(\"Monster Room\"))\n                alert('Building the \"Monstrous Monument\" card allows you to select a Monster Card from the discard pile and put it in your hand. Select an appropriate card below and click the \"USE\" button to add it to your hand.')\n                break\n            // \"When you build this room, you may swap the placement of two Rooms in any one dungeon.\"\n                break\n            case \"Centipede Tunnel\":\n                let userWantsToSwapRooms = window.confirm('The Centipede Tunnel allows you to swap the placement of two Rooms in your dungeon. Click \"OK\" if you want to swap rooms or \"Cancel\" if not.')\n                if(userWantsToSwapRooms){\n                    dispatch(changeUseButtonSwapping())\n                    alert('Select the first room you wish to swap, click the \"SWAP\" button, and then select the second room.')\n                }\n                break \n            default:\n                return\n        }\n    }\n\n    const beastMenagerieInDungeon = () => {\n\n        let hasBeastMenagerie = false\n\n        playerDungeon.forEach(cardArr => {\n            if(cardArr[0].name === \"Beast Menagerie\"){\n                hasBeastMenagerie = true\n            }\n        })\n        if(beastMenagerieFirstTime && hasBeastMenagerie && (selectedCard.subtitle === \"Monster Room\" || selectedCard.subtitle === \"Advanced Monster Room\")){\n            dispatch(dealRoomCard())\n            setBeastMenagerieFirstTime(false)\n        }\n    }\n\n    return (\n        <div className='dungeonBody'>\n            {/* -- HERO AREA -- */}\n            <div className='heroDisplay' >\n                {heroesAtStartOfDungeon.length ? \n                renderHeroAtPosition()\n                // <Card cardObj={heroesAtStartOfDungeon[0]} className=\"hero\"/>\n                :null}\n            </div>\n            {/* -- DUNGEON AREA -- */}\n            <div className='dungeonDisplay'>\n                <div  className={buildingModeState ? 'roomAreaBuilding' : 'roomArea'} onClick={(e)=>handleBuild(e)}>\n                    {/* using .slice(0).reverse().map() reverses the order in which the cards are being displayed */}\n                    {playerDungeon.slice(0).reverse().map((roomCard, index)=>{\n                            return (\n                                <div className=\"room2\">\n                                    <Card cardObj={roomCard[0]} className={roomCard.length > 1 ? \"roomStack\" : \"room\"} key={index}/>\n                                    {roomCard[0].durability && <span className=\"durabilityLabel\">{roomCard[0].durability}/100</span>}\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n                <div className='bossArea'>\n                <Card cardObj={playerBoss} className=\"boss\"/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Dungeon\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport './css/game.css'\nimport Info from './gameComponents/Info'\nimport Hand from './gameComponents/Hand'\nimport Event from './gameComponents/Event'\nimport Town from './gameComponents/Town'\nimport Username from './gameComponents/Username'\nimport Dungeon from './gameComponents/Dungeon'\nimport { shuffleAllDecks, dealInitialCards } from './gameLogic/initializingDeck';\nimport {shuffleAllDecksAction, dealInitialCardsAction} from '../actions/sampleActions';\n\nfunction Game() {\n\n    const dispatch = useDispatch();\n    const gamePhase = useSelector(state => state.gamePhase.gamePhase)\n    const bossDeck = useSelector(state => state.cardDecks.bossDeck)\n    // const heroDeck = useSelector(state => state.cardDecks.heroDeck)\n    // const epicHeroDeck = useSelector(state => state.cardDecks.epicHeroDeck)\n    const roomDeck = useSelector(state => state.cardDecks.roomDeck)\n    // const playerBoss = useSelector(state => state.cardDecks.playerBoss)\n    const playerRooms = useSelector(state => state.cardDecks.playerRooms)\n    \n    // this is the initialization setup to shuffle decks etc.\n    useEffect(() => {\n        const initializeDeck = () => {\n            let shuffledDecks = shuffleAllDecks();\n            dispatch(shuffleAllDecksAction(shuffledDecks));\n        }\n        initializeDeck();\n    }, [])\n\n    // if the player has no rooms but does have a roomDeck and the gamePhase is 1\n    if(!playerRooms.length && roomDeck.length && gamePhase===1){\n        // console.log('dealing');\n        dealInitialCards(bossDeck, roomDeck, dealInitialCardsAction, dispatch);\n    }\n    \n    // console.log(playerBoss, playerRooms);\n    // console.log(gamePhase);\n    // console.log(\"bossDeck: \", bossDeck,\"heroDeck: \", heroDeck,\"epicHeroDeck: \", epicHeroDeck,\"roomDeck: \", roomDeck);\n    return (\n        <div className='gameBody'>\n\n            {/* -- INFO SIDE -- */}\n            <div className='infoSide'>\n                <div className='usernameArea'>\n                    <Username />\n                </div>\n                <div className='infoArea'>\n                    <Info />\n                </div>\n            </div>\n\n            {/* -- GAME SIDE -- */}\n            <div className='gameSide'>\n                <div className='progressionArea'>\n                    <div className='eventArea'>\n                        <Event />\n                    </div>\n                    <div className='townArea'>\n                        <Town />\n                    </div>\n                </div>\n                <div className='dungeonArea'>\n                    <Dungeon />\n                </div>\n                <div className='handArea'>\n                    <Hand />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Game\n","import React, { useState, useEffect } from 'react';\nimport './css/DungeonMasters.css'\n\n\nfunction DungeonMasters() {\n\n    const [highScores, setHighScores] = useState([])\n\n    useEffect(() => {\n        const getScores = async () => {\n            let response = await fetch('https://bossmonsterserver.herokuapp.com/getscores');\n            let records = await response.json();\n\n            function compareScores(a, b) {\n                if (a.souls > b.souls) {\n                    return -1\n                }\n                if (a.souls < b.souls) {\n                    return 1\n                }\n                return 0\n            }\n\n            records.sort(compareScores)\n\n            setHighScores(records)\n        }\n        getScores()\n    }, [])\n\n    // console.log(highScores);\n    return (\n        <div className='dmBody'>\n            {/* -- TITLE AREA -- */}\n            <div className=\"dmBanner\">\n                <img className=\"dmBackground\" src='/homeBannerNoWords.png'/>\n                <img className='dmTitleImg' src=\"/logo.png\" alt=\"\" />\n                <div className='dmTitle'>DUNGE<img className='dmIcon' src='/favicon.ico' />N MASTERS</div>\n\n                {/* -- LEADERBOARD AREA -- */}\n                <div className='leaderBoardContainer'>\n                    <div className='dmGuide'>\n                        <div className='dmRank'>Rank</div>\n                        <div className='dmUsername'>User</div>\n                        <div className='dmWL'>W/L</div>\n                        <div className='dmSouls'>Souls</div>\n                        <div className='dmBadge'>Title</div>\n                    </div>\n                    <div className='dmUserDisplay'>\n\n                        {/* -- SEPARATE USER -- */}\n\n                        {highScores.map((playerRecord, index) => {\n                            \n                            let badgeTitle = \"\"\n                            if(index===0){\n                                badgeTitle= \"Dungeon Master\"\n                            }\n                            else if(index===1){\n                                badgeTitle= \"Eater Of Heroes\"\n                            }\n                            else if (index===2){\n                                badgeTitle= \"House Of Wolves\"\n                            }\n                            else{\n                                badgeTitle= \"Final Boss\"\n                            }\n                            return (\n                                <div className='dmUserItem'>\n                                    <div className='dmRank1'>{index + 1}</div>\n                                    <div className='dmUsername1'>{playerRecord.username}</div>\n                                    <div className='dmWL1'>{playerRecord.win}</div>\n                                    <div className='dmSouls1'>{playerRecord.souls}</div>\n                                    <div className='dmBadge1'>{badgeTitle}</div>\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n                <img className=\"dmGoldBanner\" src='/dung-mast-banner.png' alt=\"\" />\n            </div>\n        </div>\n    )\n}\n\nexport default DungeonMasters\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ProgressBar } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction Progress() {\n\n    const [countOfProgress, setCountOfProgress] = React.useState(0);\n    const navigate = useNavigate();\n\n    React.useEffect(() => {\n        const timer = setInterval(() => {\n            setCountOfProgress((oldProgress) => {\n                if (100 === oldProgress) return navigate('/game');\n                return Math.min(oldProgress + Math.random() * 90, 100);\n            });\n        }, 400);\n\n    }, []);\n\n    return (\n        <div style={{ display: 'block', paddingTop: '17%', paddingLeft: \"5%\", paddingRight: \"5%\" }}>\n            <h1 style={{ textAlign: 'center', marginBottom: '5%', color: 'white' }}>Loading Game. . .</h1>\n            <ProgressBar now={parseInt(countOfProgress)} variant=\"success\" label={`${parseInt(countOfProgress)}% COMPLETED`} />\n        </div>\n    );\n}\n\nexport default Progress\n\n\n","import React from 'react'\nimport \"./css/Credits.css\"\n\nfunction Credits() {\n    return (\n        <div className='creditsContainer'>\n            <img className=\"dmBackground\" src='/homeBannerNoWords.png' alt=\"\" />\n\n            <div className='creditsTitle'>\n                <img className='creditsTitleImg' src=\"/logo.png\" alt=\"\" />\n            </div>\n            <div className='creditsMsg'>\n                Based On The Boss Monster Card Game <br /> By Brother Wise Games! <br /> This online version was created by:\n            </div>\n            <div className='credits'>\n                <div className='creditsPerson'>\n                    <div className='creditInfo'>\n                        Devin Brock <br /> Design <a className='creditsLink' target='_blank' href=\"https://github.com/DevinABrock\">GitHub</a> <a className='creditsLink' target='_blank' href=\"https://www.linkedin.com/in/devin-a-brock/\">LinkedIn</a>  <a className='creditsLink' target='_blank' href=\"https://devinbrock-portfolio.netlify.app/\">Portfolio</a>\n                    </div>\n                </div>\n                <div className='creditsPerson'>\n                    <div className='creditInfo'>\n                        James Ivy <br /> Design <a className='creditsLink' target='_blank' href=\"https://github.com/jameskivy\">GitHub</a> <a className='creditsLink' target='_blank' href=\"https://www.linkedin.com/in/james-k-ivy/\">LinkedIn</a>  <a className='creditsLink' target='_blank' href=\"https://jameskivy.github.io/portfolio/\">Portfolio</a>\n                    </div>\n                </div>\n                <div className='creditsPerson'>\n                    <div className='creditInfo'>\n                        Mercer Mahaffey <br /> Logic <a className='creditsLink' target='_blank' href=\"https://github.com/MercerMahaffey\">GitHub</a> <a className='creditsLink' target='_blank' href=\"https://www.linkedin.com/in/mercer-mahaffey-a74b68220/\">LinkedIn</a>  <a className='creditsLink' target='_blank' href=\"https://www.mercermahaffey.com/\">Portfolio</a>\n                    </div>\n                </div>\n                <div className='creditsPerson'>\n                    <div className='creditInfo'>\n                        Stephen Doty <br /> Logic <a className='creditsLink' target='_blank' href=\"https://github.com/stephendoty826\">GitHub</a> <a className='creditsLink' target='_blank' href=\"https://www.linkedin.com/in/stephen-doty/\">LinkedIn</a>  <a className='creditsLink' target='_blank' href=\"https://stephendoty.netlify.app/\">Portfolio</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Credits\n\n","import React from 'react'\nimport './css/HowToPlay.css'\n\nfunction HowToPlay() {\n    return (\n        <div className='htpContainer'>\n            <div className='htpTitle'>Dungeon Master Onboarding</div>\n            <img className=\"dmBackground\" src='/homeBannerNoWords.png' alt=\"\" />\n            <div className='directionsContainer'>\n                <div className='ruleTitle'>Welcome</div>\n                <div className='ruleDescription'>For the best playing experience, please play on a 1366 x 768 screen or higher.</div>\n                <div className='ruleDescription'>In order to make this game single player, we had to modify some of the rules.</div>\n                <div className='ruleDescription'>Some cards have been taken out or have had their effects modified.</div>\n                <div className='ruleDescription'>Enjoy!</div>\n\n                <div className='ruleTitle'>Introduction</div>\n                <div className='ruleDescription'>So you want to become a dungeon master?</div>\n                <div className='ruleDescription'>Well, first you'll need to learn how to play the game.</div>\n\n                <div className='ruleTitle'>Rules</div>\n                <div className='ruleDescription'>Your goal is to build up your dungeon in order to lure heroes inside, kill them and gain their soul. Collect as many souls as you can. You will be limited to 6 dungeon rooms.</div>\n                <div className='ruleDescription'>If the hero makes it through your dungeon without dying, they will wound you. Ordinary Heroes inflict 1 wound while Epic Heroes inflict 2 wounds. If you receive 5 or more wounds, you are killed and the game is over.</div>\n                {/* <div className='ruleDescription'>When all 6 rooms have been built, your boss will level up. You will then be able to use their ability, but only once.</div> */}\n                <div className='ruleDescription'>Your dungeon's rooms start with 100% durability. Each hero that enters that room will lower the durability by 20%. Once it reaches 0, it will be destroyed at the end of the turn.</div>\n                <div className='ruleDescription'>For every 2 rooms destroyed in the manner listed above, you will be given 1 Room Card and 1 build action you can use in the next build phase.</div>\n                <div className='ruleDescription'>Advanced Rooms can only be built on top of other rooms with the same type. Monster on monster, trap on trap.</div>\n\n                <div className='ruleTitle'>Gameplay</div>\n                <div className='ruleDescription'>1. Pre-game: You will be randomly given a boss monster and 5 room cards. You will have the chance to then build 1 room to the left of your boss monster.</div>\n                <div className='ruleDescription'>2. Beginning of Turn: Starts a new turn. Certain card abilities can only be used once per turn.</div>\n                {/* <div className='ruleDescription'>3. Spell phase: d20 is rolled. If the result is greater or equal to the number of turns, a spell is cast against the player. Resolve any spell effects before moving on.</div> */}\n                <div className='ruleDescription'>3. Town Phase: Heroes enter the town. The number of heroes is determined by the turn number.\n                <br/>\n                <br/>&nbsp;&nbsp;Turns 1-3: 1 Ordinary Hero\n                <br/>&nbsp;&nbsp;Turns 4-6: 2 Ordinary Heroes \n                <br/>&nbsp;&nbsp;Turns 7-9: 3 Ordinary Heroes\n                <br/>&nbsp;&nbsp;Turns 10-12: 2 Epic Heroes\n                <br/>&nbsp;&nbsp;Turns 13-14: 3 Epic Heroes\n                <br/>\n                <br/>NOTE: You will encounter Ordinary Heroes first. They are easier to kill but only give you 1 soul. Near the end of the game, you will start encountering Epic Heroes. They are harder to kill but give 2 souls.</div>\n                \n                <div className='ruleDescription'>4. Build Phase: You are given 1 room card and 1 build action. Build rooms in an attempt to bait heroes into your dungeon and kill them without taking a wound.</div>\n                <div className='ruleDescription'>5. Bait phase: Heroes are baited into the dungeon if there is enough of their treasure type (2 for Ordinary Heroes and 3 for Epic Heroes). Thieves want gold, Fighters want weapons, and Cleric want relics. If no hero is baited, return to phase 2.</div>\n                <div className='ruleDescription'>6. Adventure phase: Heroes traverse your dungeon and are either killed or wound you.</div>\n                <div className='ruleDescription'>7. End of Turn: If you have 5 or more wounds, you are killed and the game is over. How long can you survive? How many souls can you collect?</div>\n                <div className='ruleDescription'>Repeat phases 2-7 until the hero deck is exhausted or you are wounded 5 times.</div>\n            </div>\n        </div>\n    )\n}\n\nexport default HowToPlay\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore } from \"redux\"\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\nimport BaseLayout from \"./components/layout/BaseLayout\"\nimport reducer from \"./reducers\"\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\nimport Game from './components/Game.jsx'\nimport DungeonMasters from './components/DungeonMasters.jsx'\nimport Progress from './components/Progress'\nimport Credits from './components/Credits'\nimport HowToPlay from './components/HowToPlay'\n\n// const saveToLocalStorage = (reduxGlobalState) => {\n\n//   //serialization = converting js object to string\n//   try{\n//     const serializedState = JSON.stringify(reduxGlobalState)\n//     localStorage.setItem(\"state\", serializedState)\n//   }\n//   catch(e){\n//     console.log(e)\n//   }\n// }\n\n// const loadFromLocalStorage = () => {\n\n//   // deserialize = converting string to js object\n//   const serializedState = localStorage.getItem(\"state\")\n\n//   if(serializedState === null){\n//     return undefined\n//   }\n//   else{\n//     return JSON.parse(serializedState)\n//   }\n\n// }\n\n// const persistedState = loadFromLocalStorage()\n\n// const store = createStore(reducer, persistedState, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()) \n\n\n//! to persist state uncomment code above and below and comment out this code\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\n// store.subscribe(()=>{\n\n//   // happens everytime there is a change to global state\n//   saveToLocalStorage(store.getState())\n\n// })\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <BaseLayout>\n          <Routes>\n            <Route path=\"/\" element={<App />} />\n            <Route path=\"/game\" element={<Game />} />\n            <Route path=\"/dungeon-masters\" element={<DungeonMasters />} />\n            <Route path=\"/progress\" element={<Progress />} />\n            <Route path=\"/credits\" element={<Credits />} />\n            <Route path=\"/how-to-play\" element={<HowToPlay />} />\n          </Routes>\n        </BaseLayout>\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}